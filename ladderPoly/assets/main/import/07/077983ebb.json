[1,["c4YhNVpv5OgK8+kfpN8NXb@2f5fc","c4YhNVpv5OgK8+kfpN8NXb@dc9c8","2ewRRY+FVJeLFN8+1c9pf6","c4YhNVpv5OgK8+kfpN8NXb@f04de","c4YhNVpv5OgK8+kfpN8NXb@b31f4","c4YhNVpv5OgK8+kfpN8NXb@ec58f","c4YhNVpv5OgK8+kfpN8NXb@56ce1","1brw/JvvpFnIvdrxpFCgMZ","58zz2z5vRJQ6B2JhV5EkKc","44XV2dxWtFKLyQyEc1fl2U@ab65f","ffKMr92i5MOp0EMlc+R5vH@f9941","90+GVzW69B4pfbhgTR9Ctl@a9630","50c14gchFOnLZ2TWSM3Ay7@b6423","cdYY3lWfxImbpPVRlfPiTO@6c48a","d3x4IMKphEKYvHuEU7yaxB","c4YhNVpv5OgK8+kfpN8NXb@73b7f","5fTdeYKuZLv4S0UEu2zOrt@6c48a","3a+b4vk9JBoLe3PMAwVLNK@6c48a","02bEoV4H1AU4ben5/jAYjl@6c48a","7egaiZbHxJPYDP5Pcw5PSP","fbmCWg/X9IxbEhmvkPnyAR@72704","5b7p8Ml3FOc7DqC7ttpnaY@a865e","a8c6dCtQNKloVwb+VCaXA1@57e42","ca8XLfA7dMWopTk/PkvlFG@5ecd9","27rEEsnvpOrY4s/mUzx4eP@96245","50HaPF8thF97wEUTDViBH/@cd579","1c9zKTPhBJwb+hWdqq29GL@b452c","58yf2/3klBQYP6mtg/eFkc@b940a","b1yzLmyMlAyZ1SEZ2uQWsy@0a7b5","89ScHxmytBjLFQYRqUVDQW@6c48a","19gZFizj9PfIiJiy81vydM@6c48a","12Y9dMgWdJKJGmTiZyQR9H@2e76e","c4YhNVpv5OgK8+kfpN8NXb@16491","c4YhNVpv5OgK8+kfpN8NXb@b68c0","c4YhNVpv5OgK8+kfpN8NXb@1da29","c4YhNVpv5OgK8+kfpN8NXb@d0482","c4YhNVpv5OgK8+kfpN8NXb@4e2c6","c4YhNVpv5OgK8+kfpN8NXb@9fc15","c4YhNVpv5OgK8+kfpN8NXb@0edaf","c4YhNVpv5OgK8+kfpN8NXb@c4e7c","c4YhNVpv5OgK8+kfpN8NXb@1981d","c4YhNVpv5OgK8+kfpN8NXb@ab932","c4YhNVpv5OgK8+kfpN8NXb@0c64b","c4YhNVpv5OgK8+kfpN8NXb@6b9e5","c4YhNVpv5OgK8+kfpN8NXb@bc99f","c4YhNVpv5OgK8+kfpN8NXb@f3f43","c4YhNVpv5OgK8+kfpN8NXb@e8081","c4YhNVpv5OgK8+kfpN8NXb@0086d","c4YhNVpv5OgK8+kfpN8NXb@43943","c4YhNVpv5OgK8+kfpN8NXb@da0f1","c4YhNVpv5OgK8+kfpN8NXb@30895","c4YhNVpv5OgK8+kfpN8NXb@3e1fc","c4YhNVpv5OgK8+kfpN8NXb@1944f","c4YhNVpv5OgK8+kfpN8NXb@3ff81","c4YhNVpv5OgK8+kfpN8NXb@fa0b9","c4YhNVpv5OgK8+kfpN8NXb@d4bfe","c4YhNVpv5OgK8+kfpN8NXb@bd060","c4YhNVpv5OgK8+kfpN8NXb@154a9","c4YhNVpv5OgK8+kfpN8NXb@8298a","c4YhNVpv5OgK8+kfpN8NXb@273f5","c4YhNVpv5OgK8+kfpN8NXb@dddad","c4YhNVpv5OgK8+kfpN8NXb@75a7f","c4YhNVpv5OgK8+kfpN8NXb@3030e","c4YhNVpv5OgK8+kfpN8NXb@6de78","c4YhNVpv5OgK8+kfpN8NXb@d12b6","c4YhNVpv5OgK8+kfpN8NXb@cf350","c4YhNVpv5OgK8+kfpN8NXb@9a69e","c4YhNVpv5OgK8+kfpN8NXb@8aa52","c4YhNVpv5OgK8+kfpN8NXb@92be6","c4YhNVpv5OgK8+kfpN8NXb@292c3","c4YhNVpv5OgK8+kfpN8NXb@3b962","c4YhNVpv5OgK8+kfpN8NXb@4b07f","c4YhNVpv5OgK8+kfpN8NXb@72172","c4YhNVpv5OgK8+kfpN8NXb@355a1","c4YhNVpv5OgK8+kfpN8NXb@d502a","c4YhNVpv5OgK8+kfpN8NXb@ccafa","c4YhNVpv5OgK8+kfpN8NXb@6f801","c4YhNVpv5OgK8+kfpN8NXb@29c04","c4YhNVpv5OgK8+kfpN8NXb@164bf","c4YhNVpv5OgK8+kfpN8NXb@e6250","c4YhNVpv5OgK8+kfpN8NXb@d3b3d","c4YhNVpv5OgK8+kfpN8NXb@0c258","c4YhNVpv5OgK8+kfpN8NXb@86651","c4YhNVpv5OgK8+kfpN8NXb@4cdf4","c4YhNVpv5OgK8+kfpN8NXb@c4343","c4YhNVpv5OgK8+kfpN8NXb@e52e4","c4YhNVpv5OgK8+kfpN8NXb@22cb6","c4YhNVpv5OgK8+kfpN8NXb@c22cd","c4YhNVpv5OgK8+kfpN8NXb@31494","c4YhNVpv5OgK8+kfpN8NXb@6b00e","c4YhNVpv5OgK8+kfpN8NXb@d52ec","c4YhNVpv5OgK8+kfpN8NXb@aba19","c4YhNVpv5OgK8+kfpN8NXb@f37a5","c4YhNVpv5OgK8+kfpN8NXb@5d526","c4YhNVpv5OgK8+kfpN8NXb@0f31c","c4YhNVpv5OgK8+kfpN8NXb@7bf25","c4YhNVpv5OgK8+kfpN8NXb@760fd","c4YhNVpv5OgK8+kfpN8NXb@77f21","c4YhNVpv5OgK8+kfpN8NXb@a989b","c4YhNVpv5OgK8+kfpN8NXb@2b4e7","c4YhNVpv5OgK8+kfpN8NXb@391b1","c4YhNVpv5OgK8+kfpN8NXb@66373","c4YhNVpv5OgK8+kfpN8NXb@e3a97","c4YhNVpv5OgK8+kfpN8NXb@6107a","c4YhNVpv5OgK8+kfpN8NXb@10a7f","c4YhNVpv5OgK8+kfpN8NXb@172cf","c4YhNVpv5OgK8+kfpN8NXb@51020","c4YhNVpv5OgK8+kfpN8NXb@a978e","c4YhNVpv5OgK8+kfpN8NXb@53398","c4YhNVpv5OgK8+kfpN8NXb@55757","c4YhNVpv5OgK8+kfpN8NXb@8773e","c4YhNVpv5OgK8+kfpN8NXb@f7417","c4YhNVpv5OgK8+kfpN8NXb@9df60","c4YhNVpv5OgK8+kfpN8NXb@d4f88","c4YhNVpv5OgK8+kfpN8NXb@6e70c","c4YhNVpv5OgK8+kfpN8NXb@ffb83","c4YhNVpv5OgK8+kfpN8NXb@f3416","c4YhNVpv5OgK8+kfpN8NXb@9da75","c4YhNVpv5OgK8+kfpN8NXb@ee77d","c4YhNVpv5OgK8+kfpN8NXb@f8008","a4liAwEb1JMJ9DObDzxkeB","6c1OjBtj9Lu7PbsyP6CLQ1","12Y9dMgWdJKJGmTiZyQR9H@801ec","e0q63CIZNGSoLD77c3hWKh","12Y9dMgWdJKJGmTiZyQR9H@a804a","c4YhNVpv5OgK8+kfpN8NXb@ca3ad","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","71JMlKmYVPOq+nIOUQUpcv@6c48a","ffKMr92i5MOp0EMlc+R5vH@6c48a"],["node","_mesh","_effectAsset","_parent","mainTexture","root","data","value","albedoMap","normalMap","_skeleton","_defaultClip","_spriteFrame","asset","emissiveMap","pbrMap","metallicRoughnessMap","alphaSourceMap","_cameraComponent","camera","cameraBase","pawn","diceBtn","label","labelNode","scene","_normalSprite","tile","_envmapHDR","_envmapLDR","_textureSource"],[["cc.Node",["_name","_id","_layer","_active","_objFlags","__editorExtras__","_parent","_components","_prefab","_lpos","_lrot","_euler","_children","_lscale"],-3,1,9,4,5,5,5,2,5],"cc.ImageAsset",["cc.MeshRenderer",["_name","_enabled","node","_materials","lightmapSettings","_mesh","__prefab"],1,1,3,4,6,4],"cc.TextureCube",["cc.Material",["_name","_states","_defines","_techIdx","_props"],-1,12],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_prefab","_lpos","_lrot","_euler","_components"],2,12,4,5,5,5,9],["cc.Node",["_name","_layer","_parent","_lpos","_children","_prefab","_lrot","_euler","_components"],1,1,5,9,4,5,5,12],["cc.Node",["_name","_parent","_components","_lpos","_lrot","_euler"],2,1,2,5,5,5],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots"],2,1,1,2],["cc.Animation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],2,1,4,3,4,1,6,6],["cc.Widget",["_alignFlags","node","_target"],2,1,1],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","_cacheMode","node","_color"],-3,1,5],["cc.Camera",["_clearFlags","_visibility","_projection","_priority","_orthoHeight","_far","node","_color"],-3,1,5],"cc.SpriteFrame",["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_props","_defines"],0],["cc.SkeletalAnimation",["_name","playOnLoad","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.ModelLightmapSettings",[],3],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["69aa4pJvQNBfZNx+tyIxz1K",["node","__prefab"],3,1,4],["cc.SceneAsset",["_name"],2],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["9e1f0FT2wpJOYQlvGQxcPRz",["node","label","diceBtn","pawn","cameraBase","camera","tile"],3,1,1,1,1,1,1,6],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.Sprite",["_sizeMode","node","_color","_spriteFrame"],2,1,5,6],["cc.Button",["node","clickEvents","_normalSprite"],3,1,9,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["73d5aZXqxJEarhAaiFPEnNL",["node","labelNode"],3,1,1],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","propertyOverrides"],2,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["cc.DirectionalLight",["_colorTemperature","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",[],3]],[[9,0,1,2,2],[20,0,2],[16,0,1,2,3],[22,1],[2,2,6,3,4,5,1],[0,0,6,7,8,9,10,13,11,2],[0,0,6,12,8,9,10,11,2],[4,0,1,2,4,4],[0,0,6,8,9,10,11,2],[7,0,2,4,5,3,6,7,2],[43,0,1,2,2],[0,0,6,7,8,9,10,11,2],[26,0,1,1],[0,0,12,8,9,10,11,2],[40,0,2],[42,0,1,2,3],[44,0,1,2,2],[5,0,2],[0,0,6,7,8,9,2],[0,0,2,6,12,7,9,3],[0,0,2,6,7,3],[0,4,5,6,8,3],[21,0,1,2,3,2],[36,0,1,2,3,2],[13,0,1,2,6,4],[41,0,1,2],[17,0,1,2,4],[4,0,3,1,2,4,5],[18,0,1,2,4],[5,1],[0,0,12,7,8,9,10,11,2],[0,0,6,12,7,8,2],[0,0,3,6,7,8,9,3],[0,0,6,7,8,2],[0,0,6,12,8,10,11,2],[0,0,2,7,8,9,13,3],[0,0,6,12,7,8,9,10,11,2],[0,0,6,7,8,10,11,2],[0,0,2,1,12,7,9,4],[0,0,1,6,12,7,9,13,3],[0,0,1,6,12,9,3],[0,0,1,6,7,9,10,11,3],[0,0,1,6,7,10,13,11,3],[6,0,1,2,3,4,5,2],[6,0,1,6,2,2],[7,0,1,2,8,3,3],[8,0,1,2,3,4,5,2],[8,0,1,2,3,2],[19,0,1,2,3,4,5,3],[9,0,3,2],[10,0,1,1],[10,0,1,2,3,1],[11,1,2,3,4,5,6,7,1],[11,0,1,2,3,4,5,6,7,2],[23,0,1,2,3,4],[2,0,2,6,3,4,5,2],[2,0,1,2,3,4,5,3],[2,0,2,3,4,5,2],[24,0,1,1],[25,0,2],[27,0,1,1],[12,0,1,2],[12,0,1,2,2],[28,0,1,2,3,4,5,6,1],[29,0,1,2,3,2],[30,0,1,2,3,4,1],[31,0,1,2,3,4,2],[32,0,1],[33,0,1,2,2],[34,1],[35,1],[37,0,1,2,1],[38,0,1,2,3],[39,0,1,1],[13,0,1,2,3,4,5,6,7,7],[45,0,1,2,2],[46,1],[14,0,1,6,3],[14,2,3,4,5,0,1,6,7,7]],[[[[2,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[2,".bin",2864929873,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":73976,"length":24576,"count":6144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":73976,"count":1321,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1,-0.5],"maxPosition",8,[1,0.5,1,0.5]]],-1],0,0,[],[],[]],[[[2,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[26,"dcc/imported-metallic-roughness",[{"hash":3579567951,"name":"dcc/imported-metallic-roughness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"occlusion","type":13,"count":1},{"name":"roughness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalStrength","type":13,"count":1},{"name":"alphaSource","type":13,"count":1},{"name":"albedoScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"baseWeightMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_WEIGHT_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_NORMAL_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"roughnessMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_OCCLUSION_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"transparencyColorMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_TRANSPARENCYCOLOR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"alphaSourceMap","type":28,"count":1,"stageFlags":16,"binding":11,"defines":["USE_OPACITY_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":12,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":13,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":14,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if CC_RECEIVE_SHADOW\n  out vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    }else {\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      } else if (pcf > 0.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      }else {\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      } else {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 finalColor = diffuse * s.lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_WEIGHT_MAP\n  uniform sampler2D baseWeightMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ROUGHNESS_MAP\n  uniform sampler2D roughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_TRANSPARENCYCOLOR_MAP\n  uniform sampler2D transparencyColorMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor = texColor;\n  #endif\n  #if USE_WEIGHT_MAP\n      vec4 weightColor = texture(baseWeightMap, TEXTURE_UV);\n      weightColor.rgb = SRGBToLinear(weightColor.rgb);\n      baseColor.rgb *= weightColor.rgb;\n  #else\n      baseColor.rgb *= albedoScale;\n  #endif\n  float metallicValue = metallic;\n  #if USE_METALLIC_MAP\n     vec4 metallicColor = texture(metallicMap, TEXTURE_UV);\n     metallicValue = discolor(metallicColor.rgb);\n     #if USE_METALLIC_CHANNEL\n         metallicColor.rgb = SRGBToLinear(metallicColor.rgb);\n         metallicValue = metallicColor.METALLIC_CHANNEL;\n     #endif\n  #endif\n  s.metallic = metallicValue;\n  float roughnessValue = roughness;\n  #if USE_ROUGHNESS_MAP\n     vec4 roughnessColor = texture(roughnessMap, TEXTURE_UV);\n     roughnessValue = discolor(roughnessColor.rgb);\n     #if USE_ROUGHNESS_CHANNEL\n         roughnessColor.rgb = SRGBToLinear(roughnessColor.rgb);\n         roughnessValue = roughnessColor.ROUGHNESS_CHANNEL;\n     #endif\n  #endif\n  s.roughness = max(0.02, roughnessValue);\n  float occlusionValue = occlusion;\n  #if USE_OCCLUSION_MAP\n     vec4 occlusionColor = texture(occlusionMap, TEXTURE_UV);\n     occlusionValue = discolor(occlusionColor.rgb);\n     #if USE_OCCLUSION_CHANNEL\n         occlusionColor.rgb = SRGBToLinear(occlusionColor.rgb);\n         occlusionValue = occlusionColor.OCCLUSION_CHANNEL;\n     #endif\n  #endif\n  s.occlusion = occlusionValue;\n  #if ALPHA_SOURCE_IS_OPACITY\n    #if USE_OPACITY_MAP\n      baseColor.a = 1.0 - texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = 1.0 - alphaSource;\n    #endif\n  #else\n    #if USE_OPACITY_MAP\n      baseColor.a = texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = alphaSource;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.albedo = baseColor;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalStrength) * normalize(v_tangent) +\n      (nmmp.y * normalStrength) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.specularIntensity = 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if CC_RECEIVE_SHADOW\n  varying vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 emissive;\n     uniform float emissiveScale;\n     uniform float occlusion;\n     uniform float roughness;\n     uniform float metallic;\n     uniform float normalStrength;\n     uniform float alphaSource;\n     uniform float albedoScale;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    }else {\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      } else if (pcf > 0.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      }else {\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      } else {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 finalColor = diffuse * s.lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_WEIGHT_MAP\n  uniform sampler2D baseWeightMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ROUGHNESS_MAP\n  uniform sampler2D roughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_TRANSPARENCYCOLOR_MAP\n  uniform sampler2D transparencyColorMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor = texColor;\n  #endif\n  #if USE_WEIGHT_MAP\n      vec4 weightColor = texture2D(baseWeightMap, TEXTURE_UV);\n      weightColor.rgb = SRGBToLinear(weightColor.rgb);\n      baseColor.rgb *= weightColor.rgb;\n  #else\n      baseColor.rgb *= albedoScale;\n  #endif\n  float metallicValue = metallic;\n  #if USE_METALLIC_MAP\n     vec4 metallicColor = texture2D(metallicMap, TEXTURE_UV);\n     metallicValue = discolor(metallicColor.rgb);\n     #if USE_METALLIC_CHANNEL\n         metallicColor.rgb = SRGBToLinear(metallicColor.rgb);\n         metallicValue = metallicColor.METALLIC_CHANNEL;\n     #endif\n  #endif\n  s.metallic = metallicValue;\n  float roughnessValue = roughness;\n  #if USE_ROUGHNESS_MAP\n     vec4 roughnessColor = texture2D(roughnessMap, TEXTURE_UV);\n     roughnessValue = discolor(roughnessColor.rgb);\n     #if USE_ROUGHNESS_CHANNEL\n         roughnessColor.rgb = SRGBToLinear(roughnessColor.rgb);\n         roughnessValue = roughnessColor.ROUGHNESS_CHANNEL;\n     #endif\n  #endif\n  s.roughness = max(0.02, roughnessValue);\n  float occlusionValue = occlusion;\n  #if USE_OCCLUSION_MAP\n     vec4 occlusionColor = texture2D(occlusionMap, TEXTURE_UV);\n     occlusionValue = discolor(occlusionColor.rgb);\n     #if USE_OCCLUSION_CHANNEL\n         occlusionColor.rgb = SRGBToLinear(occlusionColor.rgb);\n         occlusionValue = occlusionColor.OCCLUSION_CHANNEL;\n     #endif\n  #endif\n  s.occlusion = occlusionValue;\n  #if ALPHA_SOURCE_IS_OPACITY\n    #if USE_OPACITY_MAP\n      baseColor.a = 1.0 - texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = 1.0 - alphaSource;\n    #endif\n  #else\n    #if USE_OPACITY_MAP\n      baseColor.a = texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = alphaSource;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.albedo = baseColor;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalStrength) * normalize(v_tangent) +\n      (nmmp.y * normalStrength) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.specularIntensity = 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":180,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":112}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_WEIGHT_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"METALLIC_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ROUGHNESS_MAP","type":"boolean"},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_TRANSPARENCYCOLOR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_OPACITY_MAP","type":"boolean"},{"name":"ALPHA_SOURCE_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_METALLIC_CHANNEL","type":"boolean"},{"name":"USE_ROUGHNESS_CHANNEL","type":"boolean"},{"name":"USE_OCCLUSION_CHANNEL","type":"boolean"},{"name":"ALPHA_SOURCE_IS_OPACITY","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2092819943,"name":"dcc/imported-metallic-roughness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"occlusion","type":13,"count":1},{"name":"roughness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalStrength","type":13,"count":1},{"name":"alphaSource","type":13,"count":1},{"name":"albedoScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"alphaSourceMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_OPACITY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = albedo.a;\n    #if USE_ALBEDO_MAP\n      alpha = texture(albedoMap, TEXTURE_UV).a;\n    #endif\n    #if ALPHA_SOURCE_IS_OPACITY\n      #if USE_OPACITY_MAP\n        alpha = 1.0 - texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n      #else\n        alpha = 1.0 - alphaSource;\n      #endif\n    #else\n      #if USE_OPACITY_MAP\n        alpha = texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n      #else\n        alpha = alphaSource;\n      #endif\n    #endif\n    if (alpha < albedoScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\n   uniform float alphaSource;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = albedo.a;\n    #if USE_ALBEDO_MAP\n      alpha = texture2D(albedoMap, TEXTURE_UV).a;\n    #endif\n    #if ALPHA_SOURCE_IS_OPACITY\n      #if USE_OPACITY_MAP\n        alpha = 1.0 - texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n      #else\n        alpha = 1.0 - alphaSource;\n      #endif\n    #else\n      #if USE_OPACITY_MAP\n        alpha = texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n      #else\n        alpha = alphaSource;\n      #endif\n    #endif\n    if (alpha < albedoScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":95,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":112}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OPACITY_MAP","type":"boolean"},{"name":"ALPHA_SOURCE_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_SOURCE_IS_OPACITY","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-metallic-roughness|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"baseWeightMap":{"value":"grey","type":28},"albedoScale":{"type":13,"value":[1]},"roughness":{"type":13,"value":[1]},"roughnessMap":{"value":"grey","type":28},"metallic":{"type":13,"value":[1]},"metallicMap":{"value":"grey","type":28},"occlusion":{"type":13,"value":[1]},"occlusionMap":{"value":"white","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"normalStrength":{"type":13,"value":[1]},"normalMap":{"value":"normal","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey"},"albedoScaleAndCutoff":{"type":16,"value":[0,0,0,0.5]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-metallic-roughness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-metallic-roughness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-metallic-roughness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"baseWeightMap":{"value":"grey","type":28},"albedoScale":{"type":13,"value":[1]},"roughness":{"type":13,"value":[1]},"roughnessMap":{"value":"grey","type":28},"metallic":{"type":13,"value":[1]},"metallicMap":{"value":"grey","type":28},"occlusion":{"type":13,"value":[1]},"occlusionMap":{"value":"white","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"normalStrength":{"type":13,"value":[1]},"normalMap":{"value":"normal","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey"},"albedoScaleAndCutoff":{"type":16,"value":[0,0,0,0.5]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-metallic-roughness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-metallic-roughness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[7,"body",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true,"OCCLUSION_CHANNEL":"b","ROUGHNESS_CHANNEL":"r","METALLIC_CHANNEL":"g","USE_SKINNING":true}],[[[{"occlusion":1,"roughness":0.8,"metallic":0.6},"albedoMap",6,0,"normalMap",6,1,"emissiveMap",6,2]],11]]],0,0,[0,0,0,0],[8,9,14,2],[16,17,18,7]],[[[2,".bin",1653151907,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":149616,"length":13722,"count":6861,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":192210,"length":2304,"count":1152,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":286962,"length":8064,"count":4032,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[3],"indexView":{"offset":421242,"length":11196,"count":5598,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":149616,"count":2078,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":163338,"length":28872,"count":401,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":194514,"length":92448,"count":1284,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":295026,"length":126216,"count":1753,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,27,31,34,37,40,44,45,48,49],[0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,35],[0,3,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51],[0,1,2,3,5,6,24,25,43,50,51]]},"minPosition",8,[1,-1.1286969184875488,0.0004072114825248718,-0.9644851088523865],"maxPosition",8,[1,1.1280615329742432,4.430077075958252,0.6853569149971008]]],-1],0,0,[],[],[]],[[[17,"Cocos"],[30,"Cocos",[-3,-4,-5],[[48,"Cocos<SkeletalAnimation>",true,-2,[1,"52StG8XKNHQKBn89CZwl3F"],[9,10,11,12,13,14,15,16,17],18]],[0,"a1neOoI9JPe45MvlxJ49KN",-1,0],[1,0,-1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[13,"Bip002 L Hand",[-6,-7,-8,-9,-10],[0,"2fyjSbQ7xI85868cDi1BON",1,0],[1,0.47114282846450806,0,0],[3,-0.7817653287697258,0.1683952333366485,-0.08155837519558504,0.5948396822325442],[1,-104.63046774967047,4.477105279013093,-21.119814351765044]],[13,"Bip002 R Hand",[-11,-12,-13,-14,-15],[0,"6fYu5zukpPj64dc26lAoJa",1,0],[1,0.4711427092552185,0,0],[3,0.7817653292447713,0.16839523343897508,0.08155836779456409,0.5948396825940029],[1,104.63046763851519,4.477105986515138,21.119813834233387]],[13,"Bip002 Spine",[-16,-17,-18],[0,"8deDWIEsNAVZotnnzWCMVu",1,0],[1,0.252804160118103,3.5096945794066414e-7,0.0002744346857070923],[3,-0.0000020804759106072992,0.0003981590192705819,6.93676086032503e-7,0.9999999207322898],[1,-0.00023843660864713534,0.04562566412936542,0.00007939449476443857]],[43,"Bip002 Neck",[[-19,-20,[8,"Bip002 Head",-21,[0,"70Uyg4SgBNgZyTos+JFACM",1,0],[1,0.18754291534423828,0,-1.4901161193847656e-8],[3,-8.786147143705162e-14,-0.03122232576672472,-8.659632757083116e-8,0.9995124643413452],[1,-3.098357017926332e-7,-3.5783965369060278,-0.000009918369950092832]]],1,1,4],[0,"48O3/ZnNFOtq3YdFKY9bYC",1,0],[1,0.665433406829834,-4.1106318349193316e-10,0.0001481771469116211],[3,-2.669600780358255e-15,0.06157424794471617,1.7078236050205865e-7,0.9981025057527976],[1,-0.000001205021695781177,7.060355294193349,0.000019533082551195423]],[31,"cocos_skel",1,[-23],[[50,-22,[1,"ecNfan2iZANIa6ctP+N9aF"]]],[0,"92S/coEk5NapT3zNiST/js",1,0]],[32,"Helmet",false,1,[[52,-24,[1,"75ru0Cl7pBIYFxqj9LneO5"],[0],[3],1,1,2]],[0,"08w+mQintPPJni7B5pVUA9",1,0],[1,0,0,0.078]],[33,"Body",1,[[53,1,-25,[1,"eeFZbK2RBLy4QobALD+gMU"],[3,4,5,6],[3],1,7,8]],[0,"c5+3Gei8tMXZoufi9OMMmd",1,0]],[6,"Bip002",6,[-26],[0,"a18b0WSP1IJYLSp2LzpK6G",1,0],[1,0,1.4394174814224243,0.018384279683232307],[3,0,-0.7071062745468981,0,0.7071072878258339],[1,0,-89.99991789555972,0]],[34,"Bip002 Pelvis",9,[4],[0,"b3I01gYUpG7L3rkY/Mibc5",1,0],[3,-0.49999930709576956,-0.49999999254917427,0.49999999254917427,0.5000007078049009],[1,0,-89.99983949055928,90]],[6,"Bip002 Spine1",4,[5],[0,"2cIfzNQt9D2pv5w60GTFAu",1,0],[1,0.3447195291519165,-9.74392122543577e-10,0.0003513079136610031],[3,-2.7546581747168357e-14,-0.03077978788265575,-8.537083465802896e-8,0.999526190081026],[1,-3.011149572685769e-7,-3.5276610445001966,-0.000009778141764872751]],[6,"Bip002 L Clavicle",5,[-27],[0,"7cXdrNZBZD8LJU7Yk+guQM",1,0],[1,-0.23000192642211914,0.22659029066562653,0.028323352336883545],[3,-0.6361306084451803,-0.7690886582797952,-0.039499043019708864,-0.04775259474705402],[1,-0.0008424411902544296,172.89484678972258,79.18984857171966]],[6,"Bip002 L UpperArm",12,[-28],[0,"55gwDaMHdCELN99NqjrXTf",1,0],[1,0.26367461681365967,0,-1.4901161193847656e-8],[3,0.03357857419689301,-0.0398420723278534,-0.37206974115274943,0.9267411700933825],[1,2.58846521639648,-3.8824087528549023,-43.81248042439644]],[6,"Bip002 L Forearm",13,[2],[0,"5bGul9+4VOypjomb2RRYPn",1,0],[1,0.5116827487945557,0,7.450580596923828e-9],[3,3.595055336630338e-9,-0.12936039168638325,-8.65297959901121e-9,0.9915976447444527],[1,2.802331504559222e-7,-14.8652667455545,-0.0000010365186908483014]],[6,"Bip002 L Finger0",2,[-29],[0,"c5VzuQWgNOsrF2rrJeuq8C",1,0],[1,0.06814885139465332,-0.1017833948135376,-0.06761693954467773],[3,0.6496226701202772,0.13313679220106886,-0.27934604511816163,0.6944283750719386],[1,90.00514239541948,34.12255839711849,-12.415191931135967]],[9,"Bip002 L Finger01",15,[[8,"Bip002 L Finger02",-30,[0,"cfOm3mUKxHZpbykpHeldRB",1,0],[1,0.07074201107025146,-1.1920928955078125e-7,0],[3,1.8324129233223919e-9,0.06414267544090939,-3.0466139086633286e-9,0.9979407383142961],[1,2.3193990135916585e-7,7.35525867313462,-3.349286975641872e-7]]],[0,"ee/oE2fthDvpZjxb8j87lp",1,0],[1,0.07074236869812012,5.960464477539063e-8,0],[3,-6.301759601313711e-9,0.11640221704419262,1.7627159851268195e-9,0.9932021565961265],[1,-7.407319011787383e-7,13.36901877485849,1.1656190691351391e-7]],[6,"Bip002 L Finger1",2,[-31],[0,"ecRF2OO+1Kg6ZHFc6ngoEu",1,0],[1,0.25803840160369873,-0.07605993747711182,0.000060439109802246094],[3,0.06533004228890654,0.1550997319427988,-0.010403928164399058,0.9856813973107901],[1,7.586134386714674,17.88558687467142,-0.014012989797106726]],[9,"Bip002 L Finger11",17,[[8,"Bip002 L Finger12",-32,[0,"50tWSvEf9Fm55wIO/kXA6+",1,0],[1,0.06295216083526611,-5.960464477539063e-8,5.960464477539063e-8],[3,9.683549130913256e-9,0.11640222439382181,3.0495184335786466e-9,0.993202155734758],[1,0.0000010614330943463798,13.36901962282832,4.76239647768404e-7]]],[0,"81228lZ3FD7q1EgLlhKhs+",1,0],[1,0.06295228004455566,0,0],[3,-1.8788470906461414e-9,0.11640221704419262,3.4289460392435338e-9,0.9932021565961265],[1,-2.595741635394667e-7,13.369018774858489,3.651958082463327e-7]],[6,"Bip002 L Finger2",2,[-33],[0,"2aPHIeH9FP+7frqZX7ZIoj",1,0],[1,0.2580385208129883,-0.025353312492370605,0.00002014636993408203],[3,0.0042401966213926326,0.2556978438501499,0.01738229190274643,0.9665911696840623],[1,-0.039683012266759236,29.635441592310343,2.0499966555654097]],[9,"Bip002 L Finger21",19,[[8,"Bip002 L Finger22",-34,[0,"7dSNVzKQxPcbtnBEaIEB+c",1,0],[1,0.06567466259002686,0,0],[3,-4.196536333144121e-9,0.12609809280913337,6.279188991271274e-9,0.992017777557388],[1,-5.677819697538621e-7,14.488347335565956,6.531594968063432e-7]]],[0,"a8xnnQj4RKWYjzo1x9v30f",1,0],[1,0.0569310188293457,0,-5.960464477539063e-8],[3,-1.879008444213511e-9,0.1260981221375761,-5.042347711207478e-9,0.9920177738293688],[1,-1.4073896886606418e-7,14.48835072340038,-6.003495308011543e-7]],[6,"Bip002 L Finger3",2,[-35],[0,"e3fSt5hg1CgpDj5bwWcSD/",1,0],[1,0.25801753997802734,0.03340023756027222,-0.00006508827209472656],[3,-0.05963092233274884,0.3167688812568696,0.08301036715765372,0.9429798024949254],[1,-9.568603704205783,37.708400576456086,6.821453378192049]],[9,"Bip002 L Finger31",21,[[8,"Bip002 L Finger32",-36,[0,"1bSRt8xYdMN7+sCEFD6LR6",1,0],[1,0.05428910255432129,-2.9802322387695312e-8,0],[3,-2.413381305187966e-9,0.07800656662404377,2.510812036653885e-9,0.9969528452055937],[1,-2.981543089612157e-7,8.947984562719617,2.652681849571953e-7]]],[0,"baERHNBGVLl72Ownxu6ZQ0",1,0],[1,0.04921448230743408,2.9802322387695312e-8,5.960464477539063e-8],[3,7.25791116532672e-10,0.15822037337903314,-1.356164119535318e-9,0.9874038249104565],[1,1.0671014845393109e-7,18.207230800284727,-1.40288337685695e-7]],[6,"Bip002 L Finger4",2,[-37],[0,"d6muAxrXBLFK8dAV+1rmFI",1,0],[1,0.24704039096832275,0.08190596103668213,-0.019670486450195312],[3,-0.0868145707558189,0.24745159160800334,0.048052826466605275,0.9638059275516617],[1,-11.032304263426557,29.07365775053084,2.846616324665754]],[9,"Bip002 L Finger41",23,[[8,"Bip002 L Finger42",-38,[0,"faDpyFtGxHJbNMHmkni93+",1,0],[1,0.03881120681762695,0,5.960464477539063e-8],[3,8.813586594615997e-10,0.11640220969456343,3.353601200164617e-9,0.993202157457495],[1,5.557699000156113e-8,13.369017926888654,3.9343820529302227e-7]]],[0,"c1dGEnlTdKSJI2DFSBS02j",1,0],[1,0.038811326026916504,0,-1.1920928955078125e-7],[3,-5.000861976308559e-9,0.11640222439382181,-5.896313694376953e-9,0.993202155734758],[1,-4.905117886222559e-7,13.369019622828322,-7.377797539020772e-7]],[6,"Bip002 R Clavicle",5,[-39],[0,"682YiTEqFHWLDY6SI1LKbb",1,0],[1,-0.23000192642211914,-0.22659046947956085,0.02832210063934326],[3,0.6361305082140936,-0.7690887408292874,0.03949691333207712,-0.04775436195928766],[1,-0.0008402105032285468,172.89319349414328,-79.18981406818966]],[6,"Bip002 R UpperArm",25,[-40],[0,"ddy6WzYfNIwoReERS6lbAX",1,0],[1,0.2636745870113373,0,-7.450580596923828e-9],[3,-0.033578574201876855,-0.039842068608476645,0.37206974120797326,0.9267411702309325],[1,-2.5884654373438716,-3.8824082042793497,43.81248042084942]],[6,"Bip002 R Forearm",26,[3],[0,"3dBakgtOdFW7vl77V+n7ng",1,0],[1,0.5116827487945557,0,1.4901161193847656e-8],[3,-2.8218932527204763e-10,-0.12936039168638322,2.3248222722025306e-8,0.9915976447444524],[1,3.12557750797446e-7,-14.86526674555451,0.000002645848855271084]],[6,"Bip002 R Finger0",3,[-41],[0,"3eyRM7FHlCdITaAb1mFEqy",1,0],[1,0.06814885139465332,0.1017833948135376,-0.06761682033538818],[3,-0.6496226726978404,0.13313676292700494,0.27934604622654674,0.6944283778272812],[1,-90.00514286106886,34.12255612569189,12.415194302873646]],[9,"Bip002 R Finger01",28,[[8,"Bip002 R Finger02",-42,[0,"dev5gI/3ZJpoBoopjdgkBv",1,0],[1,0.07074189186096191,0,5.960464477539063e-8],[3,5.042963926086063e-10,0.06414266060105547,-4.985999713810523e-9,0.997940739268128],[1,9.431724143848417e-8,7.3552569691035785,-5.664702316068646e-7]]],[0,"3cOUIrmrxOooZ9H7UAuOTS",1,0],[1,0.07074224948883057,0,0],[3,3.5845116007308622e-9,0.11640221704419262,4.119504321149127e-9,0.9932021565961265],[1,3.530136462864767e-7,13.369018774858487,5.166641959465336e-7]],[6,"Bip002 R Finger1",3,[-43],[0,"4beb88UM9ObqmEDKU5eOYn",1,0],[1,0.25803840160369873,0.07605987787246704,0.000060558319091796875],[3,-0.06533004229080558,0.1550997319473073,0.010403925370733808,0.9856813973394422],[1,-7.586134337052036,17.88558685374288,0.014012674217117068]],[9,"Bip002 R Finger11",30,[[8,"Bip002 R Finger12",-44,[0,"837O9hLxRAdrOUOSVI3XKQ",1,0],[1,0.06295204162597656,5.960464477539063e-8,5.960464477539063e-8],[3,-3.6999656858274864e-9,0.11640223174345095,6.099035973689393e-9,0.9932021548733893],[1,-5.024559447373246e-7,13.369020470798155,6.447942589725642e-7]]],[0,"1fh+L6AMlLWqHhwyvIpQch",1,0],[1,0.06295216083526611,-5.960464477539063e-8,0],[3,1.8788468702309913e-9,0.11640220969456343,-5.597105488556948e-9,0.993202157457495],[1,2.884945873600084e-7,13.369017926888658,-6.119596418013506e-7]],[6,"Bip002 R Finger2",3,[-45],[0,"64Nl8m1UtDT5x9wRhiWlUw",1,0],[1,0.2580385208129883,0.025353312492370605,0.000020265579223632812],[3,-0.004240193329510334,0.2556978717074886,-0.017382291770526838,0.9665911623316206],[1,0.03968343233867504,29.635444901844444,-2.0499965432842004]],[9,"Bip002 R Finger21",32,[[8,"Bip002 R Finger22",-46,[0,"4fDfCGBVNGO5XXancku+98",1,0],[1,0.0656747817993164,1.1920928955078125e-7,0],[3,9.395040000621576e-10,0.1260981221375761,-3.758016444337826e-9,0.9920177738293688],[1,1.6110238015344363e-7,14.48835072340038,-4.136238950734458e-7]]],[0,"c9Cks43jdPLJ6NXpcYg9nM",1,0],[1,0.0569310188293457,-1.1920928955078125e-7,0],[3,4.697524458856119e-10,0.12609809280913337,-6.246201296294787e-11,0.992017777557388],[1,5.4302546930414785e-8,14.488347335565951,-3.126676252684355e-10]],[6,"Bip002 R Finger3",3,[-47],[0,"9b02Y8cGlB3rdl42a0B+bS",1,0],[1,0.25801753997802734,-0.03340023756027222,-0.00006496906280517578],[3,0.05963092657085492,0.31676885417870576,-0.08301037532210935,0.9429798106043913],[1,9.568604288265075,37.70839744093824,-6.821454375815925]],[9,"Bip002 R Finger31",34,[[8,"Bip002 R Finger32",-48,[0,"b1+w+GP45CQbyW5GN6VEaV",1,0],[1,0.05428886413574219,2.9802322387695312e-8,0],[3,1.0490014566492711e-9,0.0780065518135563,0,0.9969528463644401],[1,1.1984042401763774e-7,8.947982860375465,9.376911134343753e-9]]],[0,"05TJ2KsRFPULnU7vt51S4G",1,0],[1,0.04921460151672363,0,-1.1920928955078125e-7],[3,-2.676862101654255e-9,0.15822038269091204,3.6019432370185636e-9,0.9874038234183323],[1,-3.681878026919706e-7,18.20723188095982,3.5901975220473506e-7]],[6,"Bip002 R Finger4",3,[-49],[0,"98hVVqDDtAi564bjFmKBxp",1,0],[1,0.24704039096832275,-0.08190596103668213,-0.019670486450195312],[3,0.08681456833311438,0.2474516059391916,-0.048052832974880756,0.9638059237659509],[1,11.032304226872471,29.0736595169429,-2.846616949519205]],[9,"Bip002 R Finger41",36,[[8,"Bip002 R Finger42",-50,[0,"1cTb9ljoJGPbfhFxOK86Pn",1,0],[1,0.038811326026916504,0,-5.960464477539063e-8],[3,2.2836150863248153e-9,0.11640223174345095,2.8467954803739885e-9,0.9932021548733893],[1,2.219315438841654e-7,13.36902047079815,3.5446163462257066e-7]]],[0,"faj/dDuG1Kr7pqIVcHJrAt",1,0],[1,0.038811326026916504,0,0],[3,-3.859055320334328e-9,0.11640222439382181,8.884043553333528e-10,0.993202155734758],[1,-4.510592258600949e-7,13.369019622828322,4.9636765904260794e-8]],[6,"Bip002 L Thigh",4,[-51],[0,"a9Xu0Fct5C0YVpUWzQpc5c",1,0],[1,-0.2528039216995239,0.2641824185848236,-0.000475078821182251],[3,-0.007310619912619043,0.014188269830691559,-0.993821603158877,-0.10983564508129504],[1,178.24977359484376,-178.96386343214957,12.597850192803794]],[6,"Bip002 L Calf",38,[-52],[0,"95XuyPUElHxraEM6bB+diO",1,0],[1,0.6210788488388062,0,1.862645149230957e-9],[3,-3.4676556204086317e-11,-0.021934063750405283,3.70651969783765e-9,0.9997594194842042],[1,5.343499009245589e-9,-2.513660143389423,4.247208456486013e-7]],[9,"Bip002 L Foot",39,[[8,"Bip002 L Toe0",-53,[0,"54uncdc4JDm7nQEgOB6cz1",1,0],[1,0.22456009685993195,0,-0.2889990508556366],[3,1.5454311872698817e-8,0.7071067811865474,-1.5454311872698817e-8,0.7071067811865474],[1,0.000002504478444114821,90.00000000000001,0]]],[0,"dcZakfp21ND6qv77uyl/si",1,0],[1,0.6210787892341614,0,-5.587935447692871e-9],[3,-0.1345264601088139,0.012528476188518371,0.11271523579192666,0.9843987730769254],[1,-15.920926482238785,3.2305942475318408,12.623450616107252]],[6,"Bip002 R Thigh",4,[-54],[0,"c5MdLcaTFKn5hqdDEdJvHK",1,0],[1,-0.2528039216995239,-0.2641824185848236,-0.0004765428602695465],[3,-0.007310314191753449,-0.01418551260877592,-0.9938216328763596,0.10983575267375542],[1,-178.25009918810895,-178.96393440973864,-12.597866007369333]],[6,"Bip002 R Calf",41,[-55],[0,"0aoMPw/7pH5In99fZ2xGl0",1,0],[1,0.6210788488388062,-5.960464477539063e-8,9.313225746154785e-10],[3,3.2684304733649494e-10,-0.021934063750405283,-1.0213622317302408e-11,0.9997594194842042],[1,3.741877226333374e-8,-2.513660143389423,-1.991619785845318e-9]],[9,"Bip002 R Foot",42,[[8,"Bip002 R Toe0",-56,[0,"73rMh0+rpNwLknuy8eMA0A",1,0],[1,0.22456009685993195,0,-0.2889990210533142],[3,-1.0185953588390975e-8,0.7071067811865474,2.0722666604292914e-8,0.7071067811865474],[1,-0.0000025044781562438674,90.00000000000004,8.537737182193318e-7]]],[0,"59DrDnrGtOoYU4c4rHB4fH",1,0],[1,0.6210787296295166,0,-5.587935447692871e-9],[3,0.13452647352112787,0.012528462080023426,-0.11271531650085638,0.9843987621822726],[1,15.9209284446258,3.2305941714865503,-12.623460004848537]]],0,[0,5,1,0,0,1,0,-1,7,0,-2,8,0,-3,6,0,-1,15,0,-2,17,0,-3,19,0,-4,21,0,-5,23,0,-1,28,0,-2,30,0,-3,32,0,-4,34,0,-5,36,0,-1,11,0,-2,38,0,-3,41,0,-1,12,0,-2,25,0,3,5,0,0,6,0,-1,9,0,0,7,0,0,8,0,-1,10,0,-1,13,0,-1,14,0,-1,16,0,3,16,0,-1,18,0,3,18,0,-1,20,0,3,20,0,-1,22,0,3,22,0,-1,24,0,3,24,0,-1,26,0,-1,27,0,-1,29,0,3,29,0,-1,31,0,3,31,0,-1,33,0,3,33,0,-1,35,0,3,35,0,-1,37,0,3,37,0,-1,39,0,-1,40,0,3,40,0,-1,42,0,-1,43,0,3,43,0,6,1,2,3,14,3,3,27,4,3,10,5,3,11,56],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,10,-1,-2,-3,-4,1,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,11],[19,20,11,8,8,8,8,21,11,9,22,23,24,25,12,26,27,28,9]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[27,"helmet","1",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true,"ROUGHNESS_CHANNEL":"g","METALLIC_CHANNEL":"b","OCCLUSION_CHANNEL":"g","USE_SKINNING":true}],[[[{"occlusion":1,"roughness":1,"metallic":1},"emissive",8,[4,0],"albedoMap",6,0,"normalMap",6,1,"pbrMap",6,2,"metallicRoughnessMap",6,3]],11]]],0,0,[0,0,0,0,0],[8,9,15,16,2],[29,30,13,13,7]],[[[54,"cocos_skel",2489756589,["Bip002","Bip002/Bip002 Pelvis","Bip002/Bip002 Pelvis/Bip002 Spine","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"],[[[7,0.000001370906943520822,0,-1,0,0,1,0,0,1,0,0.000001370906943520822,0,-0.018384279683232307,-1.4394174814224243,-2.520313735487889e-8,1],[7,-0.0000013868001360606286,1,-0.0000027577070795814507,0,1,0.0000013868000223737909,0,0,3.824388722373229e-12,-0.0000027577070795814507,-1,0,-1.4394174814224243,-0.000001945485792020918,0.018384279683232307,1],[7,1.0916177961561857e-9,1.0000001192092896,0.0000014026936696609482,0,0.9999997019767761,-2.208607741138735e-9,0.0007963179959915578,0,0.0007963180541992188,0.0000014026924191057333,-0.9999997615814209,0,-1.6922355890274048,-2.1288762752647017e-8,0.016762293875217438,1],[7,-8.326291123239571e-8,1.0000001192092896,0.0000014052243386686314,0,0.9981539249420166,1.6845628181272332e-7,-0.060735587030649185,0,-0.060735590755939484,0.0000013975729871162912,-0.9981539845466614,0,-2.03208589553833,-3.6785644397241413e-7,0.14171460270881653,1],[7,8.556218489275125e-8,1.0000001192092896,0.0000014053661061552702,0,0.9980504512786865,-1.7310831879058242e-7,0.06241287291049957,0,0.06241287663578987,0.0000013972860415378818,-0.9980505108833313,0,-2.694465398788452,5.551611366172438e-7,-0.19107219576835632,1],[7,0.9822540283203125,0.18755564093589783,0.0000013774262015431304,0,-0.18720030784606934,0.9803928136825562,0.06153041124343872,0,0.011539025232195854,-0.06043875589966774,0.9981052875518799,0,0.24119485914707184,-2.471292495727539,-0.08715686947107315,1],[7,0.5773323774337769,0.8099624514579773,-0.10319074988365173,0,-0.8104954957962036,0.5837955474853516,0.047747764736413956,0,0.098916195333004,0.056069307029247284,0.993514895439148,0,1.6904339790344238,-1.8049393892288208,-0.00392431765794754,1],[7,0.531536877155304,0.8099625110626221,-0.2478499859571457,0,-0.7711201310157776,0.5837954878807068,0.25407981872558594,0,0.3504888117313385,0.05606932193040848,0.9348871111869812,0,1.138293743133545,-1.8049392700195312,-0.3061979115009308,1],[7,0.22052259743213654,-0.0418953076004982,0.9744818806648254,0,-0.9459825754165649,-0.2526299059391022,0.20321203768253326,0,0.23766961693763733,-0.9666554927825928,-0.09534277021884918,0,1.2930899858474731,0.6075429916381836,-1.3249390125274658,1],[7,-0.3465713560581207,0.9304307699203491,0.11910998821258545,0,-0.8218239545822144,-0.3623966574668884,0.4396296739578247,0,0.452210009098053,0.054475732147693634,0.8902463316917419,0,1.5266603231430054,-0.35380733013153076,-1.0623615980148315,1],[7,-0.3647204637527466,0.9304308295249939,0.03574734926223755,0,-0.9012053608894348,-0.3623966574668884,0.23769253492355347,0,0.23411117494106293,0.05447572469711304,0.9706823825836182,0,1.6621055603027344,-0.3538074493408203,-0.6969326734542847,1],[7,-0.366295725107193,0.9304307103157043,-0.011238742619752884,0,-0.9242193102836609,-0.36239662766456604,0.12036329507827759,0,0.10791686922311783,0.05447573587298393,0.9926661849021912,0,1.667490839958191,-0.353807270526886,-0.4874696433544159,1],[7,-0.08940479904413223,0.08982105553150177,0.9919371008872986,0,-0.9626128673553467,-0.2634757459163666,-0.06290377676486969,0,0.2557012438774109,-0.9604752659797668,0.11001893877983093,0,1.3917920589447021,0.5534547567367554,-1.0251199007034302,1],[7,-0.31633952260017395,0.08982105553150177,0.9443843364715576,0,-0.9219822883605957,-0.2634757459163666,-0.28377625346183777,0,0.2233332246541977,-0.9604752659797668,0.16616125404834747,0,1.5298596620559692,0.5534547567367554,-0.6900835037231445,1],[7,-0.5261293649673462,0.08982107043266296,0.845647931098938,0,-0.8313823342323303,-0.2634757459163666,-0.4892687201499939,0,0.17886100709438324,-0.9604753255844116,0.2132979929447174,0,1.5867183208465576,0.5534547567367554,-0.33220189809799194,1],[7,-0.2914985418319702,-0.032150253653526306,0.956031084060669,0,-0.9311684370040894,-0.2192593365907669,-0.29129138588905334,0,0.21898376941680908,-0.9751368165016174,0.033976517617702484,0,1.5764656066894531,0.5773159265518188,-0.6394287347793579,1],[7,-0.5214112401008606,-0.0321502611041069,0.8526998162269592,0,-0.828679621219635,-0.2192593216896057,-0.514990508556366,0,0.20351938903331757,-0.9751366376876831,0.08768205344676971,0,1.6311850547790527,0.5773159265518188,-0.23893189430236816,1],[7,-0.7181607484817505,-0.0321502611041069,0.6951343417167664,0,-0.6734845042228699,-0.21925930678844452,-0.7059346437454224,0,0.1751106083393097,-0.9751366972923279,0.1358107328414917,0,1.575501799583435,0.5773158669471741,0.16033077239990234,1],[7,-0.42356395721435547,-0.142218217253685,0.8946326375007629,0,-0.8965204954147339,-0.07568299770355225,-0.4364890456199646,0,0.12978509068489075,-0.9869377613067627,-0.0954449474811554,0,1.6858915090560913,0.44032081961631775,-0.346687376499176,1],[7,-0.681889533996582,-0.1422182321548462,0.7174962162971497,0,-0.7152509689331055,-0.07568300515413284,-0.6947574019432068,0,0.1531093269586563,-0.9869377613067627,-0.05011429637670517,0,1.6630570888519287,0.44032084941864014,0.1820579171180725,1],[7,-0.785188615322113,-0.142218217253685,0.602704644203186,0,-0.5984853506088257,-0.07568299770355225,-0.7975506782531738,0,0.1590406447649002,-0.9869377613067627,-0.02569011226296425,0,1.5608723163604736,0.44032081961631775,0.43006646633148193,1],[7,-0.28253182768821716,-0.21087124943733215,0.9357934594154358,0,-0.9369363784790039,-0.14856134355068207,-0.3163537383079529,0,0.2057325839996338,-0.9661588668823242,-0.15559956431388855,0,1.5727102756500244,0.5608391761779785,-0.535053014755249,1],[7,-0.4912514388561249,-0.21087126433849335,0.8451069593429565,0,-0.8383984565734863,-0.14856134355068207,-0.5244210362434387,0,0.23613545298576355,-0.9661588668823242,-0.10381311923265457,0,1.616047739982605,0.5608391165733337,-0.16588270664215088,1],[7,-0.673346221446991,-0.21087124943733215,0.7086173295974731,0,-0.694421112537384,-0.14856132864952087,-0.7040657997131348,0,0.2537402808666229,-0.9661588668823242,-0.046400200575590134,0,1.5728507041931152,0.5608391165733337,0.20330405235290527,1],[7,-0.9822540283203125,0.18755580484867096,0.0000013606623952000518,0,-0.18720030784606934,-0.9803928136825562,0.06153041869401932,0,0.011541719548404217,0.06043824553489685,0.9981052875518799,0,0.24119478464126587,2.471292495727539,-0.08715688437223434,1],[7,-0.5773321986198425,0.809962272644043,0.10319347679615021,0,-0.8104955554008484,-0.5837955474853516,0.04774776101112366,0,0.09891778230667114,-0.05607152730226517,0.9935146570205688,0,1.6904339790344238,1.8049393892288208,-0.003924310207366943,1],[7,-0.5315359234809875,0.809962272644043,0.24785253405570984,0,-0.7711201310157776,-0.583795428276062,0.25407981872558594,0,0.3504903018474579,-0.056071557104587555,0.9348864555358887,0,1.138293743133545,1.8049391508102417,-0.3061979413032532,1],[7,-0.2205219268798828,-0.04189269244670868,-0.9744821190834045,0,-0.9459825158119202,0.25262993574142456,0.20321203768253326,0,0.23767022788524628,0.9666556715965271,-0.09534011781215668,0,1.2930898666381836,-0.6075431108474731,-1.3249388933181763,1],[7,0.34657254815101624,0.93043053150177,-0.11910754442214966,0,-0.8218238353729248,0.36239659786224365,0.4396296739578247,0,0.4522090256214142,-0.0544782355427742,0.890246570110321,0,1.5266602039337158,0.353807270526886,-1.0623615980148315,1],[7,0.36472105979919434,0.93043053150177,-0.03574470058083534,0,-0.90120530128479,0.36239659786224365,0.23769252002239227,0,0.23411017656326294,-0.0544782355427742,0.9706825017929077,0,1.6621053218841553,0.353807270526886,-0.6969326138496399,1],[7,0.3662959933280945,0.93043053150177,0.011241436004638672,0,-0.9242193698883057,0.36239659786224365,0.12036330997943878,0,0.10791588574647903,-0.0544782429933548,0.9926662445068359,0,1.667490839958191,0.353807270526886,-0.48746973276138306,1],[7,0.08940549939870834,0.0898236632347107,-0.9919369220733643,0,-0.9626129865646362,0.26347577571868896,-0.06290376931428909,0,0.2557010054588318,0.9604751467704773,0.11002165824174881,0,1.3917921781539917,-0.5534548163414001,-1.0251200199127197,1],[7,0.31634020805358887,0.08982367068529129,-0.944383978843689,0,-0.9219824075698853,0.26347577571868896,-0.28377628326416016,0,0.22333240509033203,0.9604750871658325,0.1661638468503952,0,1.5298599004745483,-0.5534548163414001,-0.6900835037231445,1],[7,0.5261299014091492,0.08982367813587189,-0.845647394657135,0,-0.8313823938369751,0.26347577571868896,-0.48926877975463867,0,0.17885959148406982,0.9604750871658325,0.21330030262470245,0,1.5867183208465576,-0.5534548163414001,-0.33220183849334717,1],[7,0.2914991080760956,-0.03214762359857559,-0.9560309052467346,0,-0.9311684966087341,0.2192593663930893,-0.29129132628440857,0,0.218982994556427,0.9751369953155518,0.03397912159562111,0,1.5764654874801636,-0.5773160457611084,-0.6394286155700684,1],[7,0.5214117765426636,-0.032147619873285294,-0.8526996374130249,0,-0.8286797404289246,0.2192593663930893,-0.514990508556366,0,0.20351800322532654,0.975136935710907,0.08768437802791595,0,1.6311852931976318,-0.5773160457611084,-0.2389320731163025,1],[7,0.7181611657142639,-0.032147616147994995,-0.6951339244842529,0,-0.6734845042228699,0.2192593514919281,-0.7059346437454224,0,0.1751086711883545,0.9751368761062622,0.1358126550912857,0,1.5755016803741455,-0.5773159861564636,0.16033083200454712,1],[7,0.42356425523757935,-0.1422155499458313,-0.8946328163146973,0,-0.8965205550193787,0.07568300515413284,-0.4364890158176422,0,0.12978394329547882,0.9869382381439209,-0.0954425185918808,0,1.6858915090560913,-0.44032084941864014,-0.3466872572898865,1],[7,0.6818897724151611,-0.1422155350446701,-0.7174961566925049,0,-0.7152509093284607,0.07568301260471344,-0.6947572827339172,0,0.15310746431350708,0.9869381189346313,-0.05011233687400818,0,1.6630568504333496,-0.44032081961631775,0.1820581555366516,1],[7,0.7851889133453369,-0.1422155499458313,-0.6027045845985413,0,-0.5984854102134705,0.07568302005529404,-0.797550618648529,0,0.1590384989976883,0.9869381785392761,-0.025688474997878075,0,1.5608723163604736,-0.44032084941864014,0.43006670475006104,1],[7,0.28253236413002014,-0.21086862683296204,-0.9357938170433044,0,-0.9369363784790039,0.14856131374835968,-0.3163536787033081,0,0.2057318240404129,0.966159462928772,-0.1555970162153244,0,1.5727102756500244,-0.5608391165733337,-0.5350528955459595,1],[7,0.491252064704895,-0.21086862683296204,-0.8451071977615356,0,-0.8383985757827759,0.14856131374835968,-0.5244210362434387,0,0.2361341416835785,0.9661595225334167,-0.10381081700325012,0,1.6160478591918945,-0.5608391165733337,-0.16588258743286133,1],[7,0.6733468770980835,-0.21086861193180084,-0.7086173892021179,0,-0.694421112537384,0.14856131374835968,-0.7040657997131348,0,0.25373849272727966,0.966159462928772,-0.046398285776376724,0,1.5728504657745361,-0.560839056968689,0.20330429077148438,1],[7,1.945255371713084e-12,1,0.000001402693328600435,0,1,-6.131337435379483e-14,-0.0000013430886838250444,0,-0.0000013430887975118821,0.000001402693328600435,-1,0,-2.888314962387085,5.522846180383567e-8,-0.0108213871717453,1],[7,0.21810665726661682,-0.975469708442688,-0.029805749654769897,0,-0.9757510423660278,-0.2185426652431488,0.012210058979690075,0,-0.018424367532134056,0.026419896632432938,-0.999481201171875,0,1.3472318649291992,0.571790337562561,0.008673228323459625,1],[7,0.21658959984779358,-0.975469708442688,-0.03934269770979881,0,-0.9742766618728638,-0.2185426652431488,0.05499238520860672,0,-0.062241461127996445,0.026419896632432938,-0.9977114200592041,0,0.7258347272872925,0.571790337562561,-0.02318243309855461,1],[7,3.6823930571472374e-9,-0.9538619518280029,-0.3002457618713379,0,-1,-9.441852633074177e-9,-1.9633988657119517e-8,0,1.7617226788502194e-8,0.3002457618713379,-0.9538620114326477,0,0.22829675674438477,0.5190403461456299,0.13012763857841492,1],[7,0.3002457618713379,-0.9538619518280029,4.537702480433836e-8,0,1.9633990433476356e-8,-5.315325068977472e-8,-1,0,0.9538620114326477,0.3002457618713379,4.493066363409071e-9,0,-0.4191267192363739,0.5190403461456299,0.003736634738743305,1],[7,-0.21810691058635712,-0.9754698276519775,0.029803011566400528,0,-0.9757510423660278,0.21854281425476074,0.012210052460432053,0,-0.018423769623041153,-0.02641722373664379,-0.9994813203811646,0,1.3472318649291992,-0.5717906951904297,0.008673237636685371,1],[7,-0.21658994257450104,-0.9754698276519775,0.03933997452259064,0,-0.974276602268219,0.21854281425476074,0.054992374032735825,0,-0.06224086508154869,-0.02641722559928894,-0.9977115392684937,0,0.7258345484733582,-0.5717906355857849,-0.023182418197393417,1],[7,-3.6822247473367042e-9,-0.9538627862930298,0.3002431392669678,0,-1.0000001192092896,9.441738058058036e-9,-1.963395312998273e-8,0,1.761723922300007e-8,-0.3002431392669678,-0.9538628458976746,0,0.22829678654670715,-0.519040584564209,0.1301277130842209,1],[7,-0.3002431392669678,-0.9538627862930298,-4.537688980121857e-8,0,1.963395135362589e-8,5.3153129897509643e-8,-1.0000001192092896,0,0.9538628458976746,-0.3002431392669678,4.493189820209409e-9,0,-0.41912680864334106,-0.519040584564209,0.0037366352044045925,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[17,"Tile"],[35,"Tile",8388608,[[55,"Plane<ModelComponent>",-2,[1,"fb4xh8YBxAkqKJQsMW6nF8"],[0],[3],1],[58,-3,[1,"09K1oyrVlA0JUK0I7PrJxH"]]],[0,"aa40QSYhFAKJziwjtzUarC",-1,0],[1,-485.387,-287.571,5.448],[1,0.1,1,0.1]]],0,[0,5,1,0,0,1,0,0,1,0,6,1,3],[0,0],[-1,1],[14,31]],[[[7,"water",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4284194342],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[32,2]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[7,"roof_top",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[33,2]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",420423542,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":864,"length":120,"count":30,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":3288,"length":288,"count":72,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":4536,"length":120,"count":30,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":9936,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":864,"count":18,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":984,"length":2304,"count":48,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3576,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4656,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.863564968109131,-3.6000003814697266,0],"maxPosition",8,[1,2.8635659217834473,3.6000003814697266,10.098884582519531]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[7,"tree_wood",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4278852407],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[34,2]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3130962401,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43152,"length":19560,"count":4890,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":79848,"length":1680,"count":420,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":85560,"length":336,"count":84,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":90024,"length":1368,"count":342,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43152,"count":899,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":62712,"length":17136,"count":357,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":81528,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":85896,"length":4128,"count":86,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-32,-32,-3.808443546295166],"maxPosition",8,[1,32,32.000003814697266,8.553732872009277]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[7,"smoke",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":true,"USE_OPACITY_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4294967295],"emissive",8,[4,4278190080],"alphaSourceMap",6,0]],11]]],0,0,[0,0],[17,2],[35,2]],[[[7,"grass",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[36,2]],[[[2,".bin",2881342902,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":523920,"length":78588,"count":19647,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":523920,"count":10915,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-9.15806770324707,-6.076144218444824,-0.6458109021186829],"maxPosition",8,[1,27.025310516357422,29.320505142211914,9.31824779510498]]],-1],0,0,[],[],[]],[[[7,"glass",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":0,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4285628221],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[37,2]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[7,"roof_sides",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[38,2]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",422244719,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6240,"length":2520,"count":630,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":8952,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6240,"count":130,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":8760,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,-0.6000000834465027],"maxPosition",8,[1,0.07937329262495041,0.5,2]]],-1],0,0,[],[],[]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[7,"door",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":0,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4285628221],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[39,2]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[7,"wood_planks",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[40,2]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[7,"char_man",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[41,2]],[[[2,".bin",1889505282,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":8160,"count":2040,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.096125602722168,-1.4122565984725952,-0.3926645815372467],"maxPosition",8,[1,1.9754784107208252,1.9180562496185303,9.346755981445312]]],-1],0,0,[],[],[]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[2,".bin",1526642571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":600,"count":150,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4824,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4632,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.5,0],"maxPosition",8,[1,0.05000000074505806,0.5,2]]],-1],0,0,[],[],[]],[[[7,"white",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[42,2]],[[[7,"ground_top",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4280720985],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[43,2]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[29],[44,"house_lake",[[[8,"CoronaCamera001",-4,[0,"eco9N1er9TXbzxw3J2nGca",-3,0],[1,0,1.600000023841858,35.04755783081055],[3,0.04126659702916337,0,0,0.999148171178646],[1,4.730146857371534,0,0]],[8,"CoronaCamera001.Target",-6,[0,"d3kd1MtGpdaofc/HdrPIoC",-5,0],[1,0,4.5,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],-7,-8,[8,"Corona Scatter001",-10,[0,"18UUDLW7RffYPkcv9YcP3N",-9,0],[1,-54.890899658203125,0,0.44462963938713074],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,[8,"Corona Scatter002",-55,[0,"2c8Jbj6cVWZbcNyMMFf0kg",-54,0],[1,-54.890899658203125,0,0.44462963938713074],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],-56,-57,-58],4,4,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1],[[51,-2,[1,"edZ2VW4FJXwrMhYY7dvI15"],[175],176]],[0,"ecWftwUcxbyJB+ZoxfFcwR",-1,0]],[36,"house",1,[-60,-61,-62,-63,-64,-65,-66,-67,-68,-69],[[4,-59,[1,"e2LZQjp9ZXloNve73ncB4c"],[161,162,163,164],[3],165]],[0,"988yjZnrJUQ553xdFwitii",1,0],[1,8.393011093139648,-0.13232336938381195,-7.101434707641602],[3,-0.6743797141693785,-0.21263113863408478,-0.21263113863408478,0.6743797141693785],[1,-90,-35.000004870371136,0]],[37,"ground",1,[[4,-70,[1,"b9SVodVBlc7brn43W6pRP3"],[0,1,2,3],[3],4]],[0,"6aNOQfF2lYM6ZBZOhFGYX6",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"tree_001",1,[[4,-71,[1,"1fWEjezQtbPZJnH7F9viyi"],[5,6],[3],7]],[0,"9dGjmnZlFXdpUXoGYSMmwE",1,0],[1,-8.612687110900879,-0.04999977722764015,-11.194074630737305],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.3966749906539917,1.3966749906539917,1.3966749906539917],[1,-90.00000000000003,0,0]],[5,"tree_002",1,[[4,-72,[1,"bcVAI8exhdDLLO0+48i9aT"],[8,9],[3],10]],[0,"dca4F4MwxajKOt6lvdnw1v",1,0],[1,-10.202173233032227,-0.2229021042585373,-4.3063578605651855],[3,-0.7241629339893731,-0.04194787876852138,-0.02869610852141701,0.6877535560492956],[1,0.648593008518219,0.6485919952392578,0.648593008518219],[1,-92.89365138031333,-5.697907506838663,1.2194893027753413]],[5,"CoronaScatter_converted_tree_001",1,[[4,-73,[1,"e0yz/bXYRRh5fsMzQs/3Mu"],[11,12],[3],13]],[0,"c5l7zLxCVROazeg4hDbPfV",1,0],[1,11.022293090820312,-0.4483416676521301,23.940105438232422],[3,-0.6364219729218438,0.36540293374783667,0.3519789247802393,0.5809979388098452],[1,0.6029689908027649,0.6029689908027649,0.6029689908027649],[1,-93.32131544778325,60.92536991524183,-3.216145321166278]],[5,"CoronaScatter_converted_tree_002",1,[[4,-74,[1,"9dmotTLTFcZYJ42rf7B0Bp"],[14,15],[3],16]],[0,"5bq6DIlQ1XuqowOEgKXVE6",1,0],[1,20.450462341308594,3.895491361618042,-11.647089958190918],[3,0.03560227199058675,0.672171183668762,0.7306581824625001,-0.11426722397537949],[1,0.7604799866676331,0.7604809999465942,0.7604799866676331],[1,-94.05773365377432,-168.04665609685674,-6.841255791131222]],[5,"CoronaScatter_converted_tree_003",1,[[4,-75,[1,"07S4J+JcxZVLBWK5EKanQr"],[17,18],[3],19]],[0,"3054FTAY9XZ6UxDSL53MRm",1,0],[1,-2.2103519439697266,0.5073179006576538,-17.22514533996582],[3,-0.5785129039571582,-0.18060457610577343,-0.2643973813326506,0.7501991947404013],[1,0.3865939974784851,0.3865939974784851,0.3865939974784851],[1,-78.79685047080324,-35.96823745221941,-10.820762029328735]],[5,"CoronaScatter_converted_tree_004",1,[[4,-76,[1,"7ei6G7CC5b46NTQ+6lFwwq"],[20,21],[3],22]],[0,"1eckjgshRUkpikVzHluNAC",1,0],[1,-13.162010192871094,2.7903857231140137,-18.865962982177734],[3,0.21915318189123928,0.5978601010846323,0.7426486055063312,-0.2073842596185172],[1,0.7090960144996643,0.7090960144996643,0.7090960144996643],[1,-101.49725338816029,-144.96418459194487,-2.6354679963684906]],[5,"CoronaScatter_converted_tree_005",1,[[4,-77,[1,"57BlLEQyFWH6yrfxKFOnXQ"],[23,24],[3],25]],[0,"0aT3FlAndWULZJgG5QoAxY",1,0],[1,15.458870887756348,1.7377959489822388,-13.19993782043457],[3,-0.3735953236634622,0.5194433283167401,0.6597596941607746,0.39410951366961616],[1,1.0799109935760498,1.0799109935760498,1.0799109935760498],[1,-98.68676305813324,114.4453229877332,7.580090456237675]],[5,"CoronaScatter_converted_tree_006",1,[[4,-78,[1,"716gGlf2BYAbJlRckf/xG3"],[26,27],[3],28]],[0,"b8BeEloztc95IAtSCcJ0A/",1,0],[1,-4.57776403427124,4.706810474395752,-26.21502113342285],[3,-0.6388844810095355,0.006189537663854331,-0.15547996667950167,0.7534018114592143],[1,0.5905290246009827,0.5905290246009827,0.5905290246009827],[1,-81.98358092350377,-11.253530426136766,-14.015629871223998]],[5,"CoronaScatter_converted_tree_008",1,[[4,-79,[1,"edhQgslQxfc7bszcvAQSBd"],[29,30],[3],31]],[0,"18qAUYiGRQgpSOU4N1eG/o",1,0],[1,25.34425163269043,4.377500534057617,-1.4372785091400146],[3,0.21371405632145596,0.662146249063923,0.682393290594437,-0.22411613938514724],[1,0.7597370147705078,0.7597370147705078,0.7597370147705078],[1,-91.29926578789919,-143.94064034809858,-1.3093671117180783]],[5,"CoronaScatter_converted_tree_010",1,[[4,-80,[1,"13OIQCLRhZlY3Fc55k6mu8"],[32,33],[3],34]],[0,"11056T0iNRhLnftzheBiV1",1,0],[1,-9.402273178100586,6.004402160644531,-26.639406204223633],[3,-0.7368856210056711,0.12233596523609765,0.02166443358592054,0.6645029311314138],[1,0.9843509793281555,0.9843509793281555,0.9843509793281555],[1,-95.04595987718244,11.349026995530151,-8.714041609485319]],[5,"CoronaScatter_converted_tree_012",1,[[4,-81,[1,"385WrO8KdQmIMcHg71oXqm"],[35,36],[3],37]],[0,"3d0Cb52CxTEYqvX2d0C1wp",1,0],[1,18.601985931396484,0.7949931621551514,3.027897834777832],[3,-0.669651708897203,0.2301768884324197,0.25805384758893285,0.657262048613164],[1,1.0933860540390015,1.0933860540390015,1.0933860540390015],[1,-91.72284541312632,40.42829978539712,1.7730893339436413]],[5,"CoronaScatter_converted_tree_013",1,[[4,-82,[1,"c8rt/9rcpXo6S5eDyWujvL"],[38,39],[3],40]],[0,"f8H3nzL39ckIXOdxibzv0O",1,0],[1,-27.12384796142578,-0.05000000074505806,13.911195755004883],[3,0.20600207409885804,0.685454198425435,0.6788157310298213,-0.16408805756167108],[1,0.8286910057067871,0.8286910057067871,0.8286910057067871],[1,-90.37052368920976,-149.63382948344,3.4190840584342]],[5,"CoronaScatter_converted_tree_014",1,[[4,-83,[1,"790TNOQIBZ1LR7E+Nv3KiQ"],[41,42],[3],43]],[0,"452/wapBBYiIQiYHUUoXqx",1,0],[1,7.691800117492676,-0.18697550892829895,27.751901626586914],[3,-0.5778289864473922,-0.4373653999303953,-0.4403592219406812,0.5300084197601984],[1,0.482901006937027,0.482901006937027,0.482901006937027],[1,-93.18997208069649,-76.71692458025531,2.2154132173605614]],[5,"CoronaScatter_converted_tree_015",1,[[4,-84,[1,"3e1/mYVPhY2rlmYQSiDc0j"],[44,45],[3],46]],[0,"92ULyM/FFbU6hy4Xun50v8",1,0],[1,18.39055633544922,-0.07812841981649399,21.093135833740234],[3,-0.25905266253960896,0.6729193886843681,0.6625254711840515,0.20280831934648608],[1,1.0471620559692383,1.0471630096435547,1.0471630096435547],[1,-90.6953227520937,141.81648547968302,-4.583493945049335]],[5,"CoronaScatter_converted_tree_016",1,[[4,-85,[1,"63ns1N/HpYRaMbIxyDj1gm"],[47,48],[3],49]],[0,"e71UaxFkhZxJhmT5UanYxq",1,0],[1,-21.769805908203125,0.92824786901474,-7.702356815338135],[3,-0.18217624112237046,0.6328725602326291,0.7098363399589821,0.24983296449579626],[1,0.483271986246109,0.483271986246109,0.483271986246109],[1,-94.28334858742276,144.59633269203496,7.1283429383157815]],[5,"CoronaScatter_converted_tree_017",1,[[4,-86,[1,"f3XP5tQUVWTZzZoqvsV8yn"],[50,51],[3],52]],[0,"86+td3m0ZUh7luGc2OD96f",1,0],[1,20.755191802978516,6.8972344398498535,-17.68733024597168],[3,-0.6784415974129502,0.0652565149347169,0.08364387765620537,0.7269541167700841],[1,1.5838929414749146,1.5838929414749146,1.5838929414749146],[1,-86.2457467061704,12.033640149113166,1.8948334167806438]],[5,"CoronaScatter_converted_tree_018",1,[[4,-87,[1,"98DKpHnRNfBaZlO2R/pBDN"],[53,54],[3],55]],[0,"982GHc/F9Tgo4TqPBjWB4q",1,0],[1,2.4454212188720703,3.3040263652801514,-24.337295532226562],[3,-0.39194604985374426,0.5237363011700048,0.5802154575200718,0.48520985531580246],[1,1.6191469430923462,1.6191469430923462,1.6191469430923462],[1,-88.87195076108743,102.9749799131866,8.77181964502522]],[5,"CoronaScatter_converted_tree_020",1,[[4,-88,[1,"deCRg6qFFSwKD2iX71JvnP"],[56,57],[3],58]],[0,"fbSM/h/6FYTq2U9E+pgrLs",1,0],[1,2.198401689529419,-0.04999995604157448,-11.160292625427246],[3,-0.6079094987943777,-0.3937689650290965,-0.38601225499963143,0.5713025314538542],[1,0.9547770023345947,0.9547770023345947,0.9547770023345947],[1,-92.12875492009412,-66.91104755122389,2.16011746913194]],[5,"CoronaScatter_converted_tree_021",1,[[4,-89,[1,"172ocOUJVYBJqG9uJGxDY1"],[59,60],[3],61]],[0,"8cnHaP8xFea4bb+BwUQfLA",1,0],[1,-2.875366687774658,-0.13628190755844116,-5.473372936248779],[3,-0.6254383143263312,-0.3506878214177944,-0.3442030746738395,0.6061098994959196],[1,0.6554750204086304,0.6554750204086304,0.6554750204086304],[1,-91.1059981682862,-58.855164271998625,1.2272214808168596]],[5,"CoronaScatter_converted_tree_022",1,[[4,-90,[1,"bdL4nGkx9Z4LtzDneqLg7G"],[62,63],[3],64]],[0,"9dZyqjS7dbVK1l1HyLh6kK",1,0],[1,25.20606803894043,3.5567715167999268,5.413580894470215],[3,-0.6383939963053344,0.21997362311832983,0.3096120348586184,0.6694812159308171],[1,1.2419500350952148,1.2419500350952148,1.2419489622116089],[1,-90.39389640055627,44.11453208155094,7.683407799624996]],[5,"CoronaScatter_converted_tree_023",1,[[4,-91,[1,"a3gqLZ9GJcla1BtmcSuCUY"],[65,66],[3],67]],[0,"ecNyJVSndXoK5KpuVjknzH",1,0],[1,12.299661636352539,-0.04981416091322899,-2.4225656986236572],[3,-0.608293512159554,0.29750408687159363,0.3394758881226669,0.6528602015306344],[1,0.5027009844779968,0.5027009844779968,0.5027009844779968],[1,-88.30562113749596,53.525585468555626,4.664499838702371]],[5,"CoronaScatter_converted_tree_025",1,[[4,-92,[1,"1ayIYuwGhVALAxtrKVsm9K"],[68,69],[3],70]],[0,"9dzQzyE+tWerc9yUxgDAZA",1,0],[1,-29.217144012451172,0.5634720921516418,-5.0305094718933105],[3,-0.6726356274438149,0.16030119659102776,0.20470241094763045,0.6927927265907009],[1,0.47457799315452576,0.47457799315452576,0.47457799315452576],[1,-89.35009643857371,29.910390217286846,3.8982082402364444]],[5,"CoronaScatter_converted_tree_026",1,[[4,-93,[1,"524lgYZrJUVJUICQ/6Ca3x"],[71,72],[3],73]],[0,"84/u0ngXVbz72oiS5/+s0R",1,0],[1,28.07535743713379,5.315433979034424,-9.691872596740723],[3,-0.6970872324337334,-0.11900921981604726,-0.13164432424920264,0.6946768801893617],[1,1.1597609519958496,1.1597599983215332,1.1597609519958496],[1,-90.37372101415725,-20.421967072230643,-0.9729819025787793]],[5,"CoronaScatter_converted_tree_027",1,[[4,-94,[1,"43OqNIRGZR7bfhzpoelMwZ"],[74,75],[3],76]],[0,"61TKRQBr1UFp0RyL/bnfPT",1,0],[1,11.820174217224121,3.7322325706481934,-20.804222106933594],[3,-0.5928288631649818,-0.10911960777340247,-0.08255145606119611,0.7936196238123592],[1,1.6390730142593384,1.6390730142593384,1.6390730142593384],[1,-73.53206071441443,-15.72836854238501,-0.09456128152450533]],[5,"CoronaScatter_converted_tree_029",1,[[4,-95,[1,"44ZD4oRaxd+4nhDa3AGAVH"],[77,78],[3],79]],[0,"6eHJ8xE/Zckb7liRnvakfV",1,0],[1,18.1276798248291,1.262441873550415,-6.763591766357422],[3,0.04296304775445899,0.6790883130612232,0.7303132614365822,-0.06029742748386862],[1,0.6937969923019409,0.6937969923019409,0.6937969923019409],[1,-94.03912664973426,-171.67942970100165,-1.703116575098942]],[5,"CoronaScatter_converted_tree_031",1,[[4,-96,[1,"d7/OfAC7lR97MauBD63+Re"],[80,81],[3],82]],[0,"67zmephnhd+KfCcD7l4ZmC",1,0],[1,-13.857941627502441,5.799262523651123,-24.377723693847656],[3,0.25849211397478483,0.6134516043822453,0.7163091948261608,-0.2091891333248294],[1,0.4849570095539093,0.4849570095539093,0.4849570095539093],[1,-99.19867909606232,-141.16565007484292,1.0002405827889382]],[5,"CoronaScatter_converted_tree_032",1,[[4,-97,[1,"56tYNrqqdX1qCAHBS01vHZ"],[83,84],[3],85]],[0,"efG96gzCdbIaUCNHC9Jnjv",1,0],[1,18.38848304748535,0.9276147484779358,-2.650692939758301],[3,-0.613915504166629,-0.37575808237329683,-0.2981583481610835,0.6269092571471812],[1,0.452114999294281,0.452114999294281,0.452114999294281],[1,-86.06169228446068,-57.187278666874825,5.021581304547758]],[5,"CoronaScatter_converted_tree_034",1,[[4,-98,[1,"e1V6HgMPFXn7aSTFzCG35b"],[86,87],[3],88]],[0,"13eALsKbFRR5UYDK3BcdkJ",1,0],[1,-24.87262535095215,-0.0694369226694107,4.758965969085693],[3,-0.17024490390585495,0.6778604449295828,0.6906052890041913,0.18597372043757107],[1,0.795769989490509,0.7957710027694702,0.7957710027694702],[1,-90.67851294498304,150.82766486587528,1.493543368683652]],[5,"CoronaScatter_converted_tree_036",1,[[4,-99,[1,"dfvGvTQYhR/bSJC7Mm8/83"],[89,90],[3],91]],[0,"a1TgKFbw1bYr9am7JaVZ7Q",1,0],[1,-16.37084197998047,0.4897305369377136,-8.273118019104004],[3,-0.4420922837768844,0.5179861600211011,0.5266496352271979,0.5088073430745594],[1,1.0063550472259521,1.0063550472259521,1.0063550472259521],[1,-86.87267247613244,95.25667513725303,4.469651387156356]],[5,"CoronaScatter_converted_tree_037",1,[[4,-100,[1,"c8iKtk1qFf0IgZjMnHk2Rs"],[92,93],[3],94]],[0,"3d0IHNXdZWLY1Z+hjE6vAU",1,0],[1,14.137523651123047,0.0835159569978714,-5.468167304992676],[3,-0.6375823033766416,0.24463225950359158,0.278736770714004,0.6752404584168757],[1,0.70067298412323,0.70067298412323,0.70067298412323],[1,-88.18599234821568,43.411766155607545,3.6971282229351425]],[5,"CoronaScatter_converted_tree_040",1,[[4,-101,[1,"b2i0P8aEZajo707RhT2peb"],[95,96],[3],97]],[0,"13t823FSted56hHoYPR2bU",1,0],[1,-23.797595977783203,4.151792526245117,-15.560577392578125],[3,0.12561986055952634,0.632455240111439,0.7614072685893531,-0.06692526599041573],[1,0.4485029876232147,0.4485029876232147,0.4485029876232147],[1,-101.03179387284368,-163.95457755741927,3.2666611955298]],[5,"CoronaScatter_converted_tree_041",1,[[4,-102,[1,"a7MZP6h6BW+okWafO7XTrY"],[98,99],[3],100]],[0,"aafAvloiZf/6Y3iE2c33Q1",1,0],[1,-21.497665405273438,-0.3191082775592804,10.034808158874512],[3,-0.680829345827264,-0.24356243001718075,-0.22391577053391218,0.6534603830767022],[1,0.6211389899253845,0.6211389899253845,0.6211389899253845],[1,-91.56749643701971,-38.58598124951625,2.235602783230436]],[5,"CoronaScatter_converted_tree_042",1,[[4,-103,[1,"7djhnfrlZTL6rT7c+MwbfA"],[101,102],[3],103]],[0,"d2P7vM8SxSJJf5Aon0wspS",1,0],[1,-21.826215744018555,-0.15140792727470398,-2.4174320697784424],[3,0.09923364484054023,0.6689318595119348,0.7338737443137386,-0.0641262697223241],[1,1.0088160037994385,1.0088169574737549,1.0088160037994385],[1,-95.56116703193764,-166.60782113394083,2.214455719540929]],[5,"CoronaScatter_converted_tree_046",1,[[4,-104,[1,"f74gsUeDRa/Jsxw6NXubG+"],[104,105],[3],106]],[0,"dfzj2vTcRTCIrb/CVNbl/X",1,0],[1,6.692934989929199,0.5872421860694885,-16.484811782836914],[3,0.16246667084862604,0.6473727655168436,0.733167629386889,-0.13030084631209268],[1,0.4919019937515259,0.4919019937515259,0.4919019937515259],[1,-97.34734392937878,-155.98268098866353,1.1052050493579633]],[5,"CoronaScatter_converted_tree_047",1,[[4,-105,[1,"a4Us79XC9Wmo4v0JoWUBuK"],[107,108],[3],109]],[0,"fe+3aW66FV+rSL9hSB2k7W",1,0],[1,22.249618530273438,3.0461487770080566,-4.950186729431152],[3,0.06641130275787602,0.6967912448966209,0.7082147733085111,-0.09221352812355364],[1,0.519536018371582,0.5195369720458984,0.519536018371582],[1,-90.68561332539164,-167.13024646475262,-2.181452869280795]],[5,"CoronaScatter_converted_tree_048",1,[[4,-106,[1,"a3f5VsclZcooFXoh6nUsWR"],[110,111],[3],112]],[0,"3dl/FafNBZ0JizbPJseMyf",1,0],[1,-24.651382446289062,2.0509989261627197,-10.75535774230957],[3,-0.6425438037910564,0.20401099675591822,0.27723894000701205,0.684584212172736],[1,0.278999000787735,0.278999000787735,0.278999000787735],[1,-88.81416713580563,39.7939705361493,6.7429266429487935]],[5,"CoronaScatter_converted_tree_049",1,[[4,-107,[1,"17i1mCF4lSOJ2TTZLtotcB"],[113,114],[3],115]],[0,"a5ykymVRRakoakhHkuBzjN",1,0],[1,21.505535125732422,0.048498913645744324,13.216835021972656],[3,-0.7042630149939151,-0.1086629529188267,-0.0489983286412575,0.6998607948478075],[1,0.7782949805259705,0.7782949805259705,0.7782949805259705],[1,-89.81452702035283,-12.821029860925565,4.84558180461309]],[5,"CoronaScatter_converted_tree_051",1,[[4,-108,[1,"afec+NT+lTWKzxb0jgmfy/"],[116,117],[3],118]],[0,"57snkBt0Reko1kcbM/qzgO",1,0],[1,-19.470386505126953,5.046936511993408,-20.557069778442383],[3,-0.19706455910114884,0.6043675402922966,0.7143643930222161,0.29255589170158613],[1,0.9834539890289307,0.9834539890289307,0.9834539890289307],[1,-95.73514569898995,139.78217435415053,10.357189056718164]],[5,"CoronaScatter_converted_tree_052",1,[[4,-109,[1,"f7yDCRzixW9a3nOdKTPsmF"],[119,120],[3],121]],[0,"39TAYrNdJcTLOXSneRt8Aq",1,0],[1,12.272039413452148,-0.31019243597984314,3.988490343093872],[3,-0.6955795872044374,0.13147403276960512,0.16525900335202864,0.6867117869840998],[1,0.40171098709106445,0.40171098709106445,0.40171098709106445],[1,-91.27806945171292,24.259516466939928,2.5258031449448355]],[5,"CoronaScatter_converted_tree_059",1,[[4,-110,[1,"8cqLtIP8tVaK/cMnfslKJA"],[122,123],[3],124]],[0,"7dGdvWklNev5FtDJKqcyGk",1,0],[1,26.815900802612305,2.414375066757202,10.749445915222168],[3,-0.5607346385670067,-0.24578980003091666,-0.3459872062507115,0.710954915886175],[1,0.7861539721488953,0.7861539721488953,0.7861539721488953],[1,-82.2452059549768,-49.05947404011905,-12.492798451460905]],[5,"CoronaScatter_converted_tree_060",1,[[4,-111,[1,"89EF/8SxxfdZdx/v0Hy5+O"],[125,126],[3],127]],[0,"05DCXBz1tR+ZqVNG8kimC/",1,0],[1,-5.893660545349121,2.393918037414551,-21.050386428833008],[3,0.037270732898137975,0.6016020287612213,0.7974804784063992,0.026660420482784945],[1,1.1294540166854858,1.1294540166854858,1.1294540166854858],[1,-106.0086797148606,-178.42574441536095,5.012129033476381]],[5,"CoronaScatter_converted_tree_062",1,[[4,-112,[1,"7d+xg1ya5SW6BK1xGGwf/Z"],[128,129],[3],130]],[0,"aent6/G6pTq64zObCdsuoe",1,0],[1,-19.233436584472656,2.546227216720581,-13.747750282287598],[3,-0.6898931412221924,-0.16939503316270135,-0.2080728754137092,0.6723529244016526],[1,0.5585370063781738,0.5585370063781738,0.5585370063781738],[1,-92.20841944204125,-31.026188859618273,-2.6404289953393683]],[11,"Box014",2,[[4,-113,[1,"64rMHgf21eu593znGSjUKg"],[131,132],[3],133]],[0,"9dX3uAredTOL/6PW/NHfG7",1,0],[1,-2.299999713897705,-0.9999980330467224,0.6000000834465027],[3,-9.244458590267376e-33,6.162983903560436e-33,0.9999999999996136,8.791685104366721e-7],[1,-180,180,0.00010074529025766214]],[5,"Cylinder001",2,[[4,-114,[1,"f9k2B3piFX3aChjK4XZaeD"],[134,135],[3],136]],[0,"82Amps1jFVgLbbbejWvduy",1,0],[1,-2.4414063659605745e-7,-3.09999942779541,4.324423313140869],[3,0.7071068407911907,-1.5386019832839248e-8,-1.5386003845627422e-8,0.707106721581899],[1,1.3696479797363281,1.3696479797363281,1],[1,90.00000965934633,-1.0852405424583161e-12,-0.0000024934099499007726]],[11,"Box005",2,[[4,-115,[1,"135zCfoVZSHYwdlYZ5L8fp"],[137,138],[3],139]],[0,"674m7gESdXjJaxn0g6foPv",1,0],[1,-1.2500004768371582,-3.0499989986419678,0.6000000834465027],[3,4.3578812613686264e-33,-8.715764726789198e-33,-0.7071068407911908,0.7071067215818992],[1,0,-7.062249481577025e-31,-90]],[11,"Box006",2,[[4,-116,[1,"03Z00K2jNf05yKaAZeXuZg"],[140,141],[3],142]],[0,"a9ntR+viRWJ43bFTHtn9rs",1,0],[1,1.250000238418579,-3.049999952316284,0.6000000834465027],[3,4.3578812613686264e-33,-8.715764726789198e-33,-0.7071068407911908,0.7071067215818992],[1,0,-7.062249481577025e-31,-90]],[11,"Box009",2,[[4,-117,[1,"4cgfqSWZhUcqTuac33l3II"],[143,144],[3],145]],[0,"42PH4GHf5TRpI6C4gcxT+y",1,0],[1,4.547473724858043e-16,-3.049999475479126,0.6000000834465027],[3,4.3578812613686264e-33,-8.715764726789198e-33,-0.7071068407911908,0.7071067215818992],[1,0,-7.062249481577025e-31,-90]],[5,"Box010",2,[[4,-118,[1,"d12nPT5ftdFZlhX+aPpkSM"],[146,147],[3],148]],[0,"81Oi/ZyL5cirQzMhytEAr4",1,0],[1,-1.2500007152557373,3.049999952316284,0.6000003218650818],[3,-0.7071067215815475,0.7071068407908391,7.052582425519137e-7,-7.052580720216543e-7],[1,-1,-1,-1],[1,0,180.00011429197255,-90]],[5,"Box011",2,[[4,-119,[1,"c6M3WdpQtba5iB2+Xvjeqa"],[149,150],[3],151]],[0,"cckX/RIPVcD4CYSEHT1WyN",1,0],[1,1.2499992847442627,3.049999952316284,0.6000003218650818],[3,-0.7071067215815475,0.7071068407908391,7.052582425519137e-7,-7.052580720216543e-7],[1,-1,-1,-1],[1,0,180.00011429197255,-90]],[18,"Box012",2,[[4,-120,[1,"0708ZWBGlSrbTyjZEYQISa"],[152,153],[3],154]],[0,"fccL96cQdWYrrhuqqWNZlj",1,0],[1,2.3000001907348633,-1,0.6000000834465027]],[18,"Box013",2,[[4,-121,[1,"c6je5uRc9RS4gEGFoRNOmq"],[155,156],[3],157]],[0,"bacHDqb8JdjKj7VhogJ4mX",1,0],[1,2.299999237060547,1.0000019073486328,0.6000000834465027]],[11,"Box015",2,[[4,-122,[1,"9d+HnYUkZax4QyHXTC1TEb"],[158,159],[3],160]],[0,"43d/pHedBX1YgnmubVMFen",1,0],[1,-2.299999237060547,1.0000009536743164,0.6000000834465027],[3,-6.162972883300297e-33,3.081493788489841e-33,0.9999999999995164,9.834766387934697e-7],[1,-180,180,0.00011269812130517406]],[11,"smoke",1,[[4,-123,[1,"5foRazYmteW5Y+bhiDa+11"],[166],[3],167]],[0,"bb4e0nrINXTraa93iZFbxo",1,0],[1,8.585372924804688,10.294615745544434,-4.866739273071289],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"CoronaScatter_converted_grass_001",1,[[4,-124,[1,"23bZLSiAtUxIbS6AGF5P7m"],[168],[3],169]],[0,"d7ZnvqMjNfNqxEtBmqQ6kd",1,0],[1,11.024171829223633,-0.44814634323120117,23.942960739135742],[3,-0.6544875078333432,0.3339610485475655,0.3855442505946805,0.5580965427025116],[1,1.7506450414657593,1.7506439685821533,1.7506450414657593],[1,-98.85880993157419,61.336644622298,-0.3898917429963555]],[11,"marine",1,[[4,-125,[1,"757x4spU1dhajkhBM/RoNU"],[170,171],[3],172]],[0,"3b48flWwdRebLiC0iZUw8b",1,0],[1,6.712887287139893,-0.1126118153333664,1.9157646894454956],[3,-0.6123724160812535,-0.3535534245666534,-0.3535534245666534,0.6123724160812535],[1,-90.00000000000001,-60.00000635734461,0]],[5,"char_man",1,[[4,-126,[1,"20DU6Q7LhUl7piDlpw5Zs7"],[173],[3],174]],[0,"f8ISaB3K9WQ6XyRUQkihOJ",1,0],[1,4.098451137542725,-0.11261175572872162,3.7351224422454834],[3,2.111097991577054e-8,0.2588190471264926,-5.6566703196059405e-9,0.9659258257467463],[1,1.2031749486923218,1.2031749486923218,1.2031749486923218],[1,0.0000025044781326525065,30.000000240111707,-2.7930113959124048e-14]]],0,[0,5,1,0,0,1,0,5,1,0,3,1,0,5,1,0,3,1,0,-3,3,0,-4,4,0,5,1,0,3,1,0,-6,5,0,-7,6,0,-8,7,0,-9,8,0,-10,9,0,-11,10,0,-12,11,0,-13,12,0,-14,13,0,-15,14,0,-16,15,0,-17,16,0,-18,17,0,-19,18,0,-20,19,0,-21,20,0,-22,21,0,-23,22,0,-24,23,0,-25,24,0,-26,25,0,-27,26,0,-28,27,0,-29,28,0,-30,29,0,-31,30,0,-32,31,0,-33,32,0,-34,33,0,-35,34,0,-36,35,0,-37,36,0,-38,37,0,-39,38,0,-40,39,0,-41,40,0,-42,41,0,-43,42,0,-44,43,0,-45,44,0,-46,45,0,-47,2,0,-48,56,0,5,1,0,3,1,0,-50,57,0,-51,58,0,-52,59,0,0,2,0,-1,46,0,-2,47,0,-3,48,0,-4,49,0,-5,50,0,-6,51,0,-7,52,0,-8,53,0,-9,54,0,-10,55,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,0,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,41,0,0,42,0,0,43,0,0,44,0,0,45,0,0,46,0,0,47,0,0,48,0,0,49,0,0,50,0,0,51,0,0,52,0,0,53,0,0,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,6,1,126],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,-3,-4,1,-1,1,-1,1,-1,-2,1,-1,1,-1,11],[44,45,46,47,48,0,3,49,0,1,50,0,1,51,0,3,52,0,1,53,0,1,54,0,1,55,0,1,56,0,5,57,0,3,58,0,1,59,0,5,60,0,3,61,0,3,62,0,5,63,0,5,64,0,1,65,0,3,66,0,1,67,0,3,68,0,3,69,0,1,70,0,1,71,0,3,72,0,3,73,0,1,74,0,1,75,0,3,76,0,1,77,0,5,78,0,1,79,0,1,80,0,1,81,0,1,82,0,1,83,0,1,84,0,1,85,0,5,86,0,5,87,0,5,88,0,5,89,0,3,90,4,6,91,4,6,92,4,6,93,4,6,94,4,95,96,4,6,97,4,6,98,4,6,99,4,6,100,4,6,101,102,103,104,4,105,106,107,108,109,0,110,111,112,113,15,15]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",4078695201,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":293040,"length":131496,"count":32874,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":293040,"count":6105,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.49655771255493164,-0.4073067903518677,-0.3304348289966583],"maxPosition",8,[1,0.4477892816066742,0.8737097978591919,0.36300843954086304]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[7,"tree_leaves_1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4280720985],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[114,2]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[7,"walls",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4286545791],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[115,2]],[[[2,".bin",519915732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37248,"length":17664,"count":4416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":66624,"length":5184,"count":1296,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37248,"count":776,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.934370994567871,-2.9028148651123047,0],"maxPosition",8,[1,2.9398226737976074,2.8821372985839844,10.021397590637207]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[7,"ground_bottom",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4280720985],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[116,2]],[[[7,"tree_leaves_3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4280720985],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[117,2]],[[[7,"tree_leaves_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4280720985],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[118,2]],[[[2,".bin",3200099208,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11904,"length":2040,"count":510,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":15096,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11904,"count":248,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":13944,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.800000011920929,-0.800000011920929,-0.0535866841673851],"maxPosition",8,[1,0.800000011920929,0.800000011920929,0.10000000149011612]]],-1],0,0,[],[],[]],[[[7,"ground_side",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"albedoScale":1,"metallic":0,"roughness":1,"emissiveScale":1,"alphaSource":1},"mainColor",8,[4,4280720985],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[119,2]],[[[2,".bin",455583587,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1056,"count":264,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":6528,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":6144,"length":384,"count":8,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.5,-3.5,-1.2999999523162842],"maxPosition",8,[1,1.5,3.5,0]]],-1],0,0,[],[],[]],[[[2,".bin",3486632780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":12864,"count":3216,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":53952,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":40032,"length":13920,"count":290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.4041004180908203,-3.4041004180908203,0],"maxPosition",8,[1,3.404100179672241,3.404100179672241,7.683661460876465]]],-1],0,0,[],[],[]],[[[59,"gameScene"],[38,"Canvas",33554432,"d83NQnCF1FkY43r2i6O+Rl",[-11,-12,-13],[[12,-1,[5,960,640]],[60,-3,-2],[61,45,-4],[63,-10,-9,-8,-7,-6,-5,3]],[1,480,320,0]],[64,"gameScene",[-16,-17,1,-18,-19,-20],[49,"cfacc403-843c-4978-9cfe-47cc0e075c0e",[-14,-15]],[65,[66,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[67,[4,4283190348]],[68,true,13,14],[69],[70]]],[19,"hud",33554432,1,[-24,-25],[[12,-21,[5,300,100]],[23,0,-22,[4,4278190080],2],[62,9,-23,1]],[1,-330,270,0]],[19,"btn",33554432,3,[-29],[[12,-26,[5,120,50]],[23,0,-27,[4,4294901770],0],[71,-28,[[72,"9e1f0FT2wpJOYQlvGQxcPRz","onClick",1]],1]],[1,-78.30100000000004,-5.684341886080802e-14,0]],[39,"player","c1fbl0+ZJJZokOInG+G2W1",2,[-33],[[56,"Capsule<ModelComponent>",false,-30,[8],[3],9],[73,-32,-31]],[1,-1.237,0.726,0.362],[1,0.5,0.5,0.5]],[14,["a1neOoI9JPe45MvlxJ49KN"]],[14,["ecWftwUcxbyJB+ZoxfFcwR"]],[20,"sff",33554432,1,[[12,-34,[5,42.26,50.4]],[74,"",20,20,2,false,2,-35,[4,4278242559]]]],[14,["52StG8XKNHQKBn89CZwl3F"]],[40,"3dCameraBase","9bEKvUqZlEfrcMtyPXqv68",2,[-36],[1,0,5.781,8.668]],[20,"txt",33554432,4,[[12,-37,[5,105.59,50.4]],[24,"ROLL DICE",20,20,-38]]],[45,"Label",33554432,3,[[[12,-39,[5,14.44,50.4]],-40],4,1],[1,67.375,-5.684341886080802e-14,0]],[21,0,null,5,[22,"a1neOoI9JPe45MvlxJ49KN",-41,[25,"d6VNdilGpP9o3+p31jeRAM",[[15,"Cocos",["_name"],6],[10,["_lpos"],6,[1,0,-1,0]],[10,["_lscale"],6,[1,0.5,0.5,0.5]],[10,["_lrot"],6,[3,0,0.7071067811865475,0,0.7071067811865476]],[10,["_euler"],6,[1,0,90,0]],[15,2,["_clips","length"],9],[16,["_clips","0"],9,5],[16,["_clips","1"],9,6],[16,["_defaultClip"],9,7]]],4]],[21,0,null,2,[22,"ecWftwUcxbyJB+ZoxfFcwR",-42,[25,"0b5hlceFFP64Z2F+S4Np+6",[[15,"house_lake",["_name"],7],[10,["_lpos"],7,[1,0,1.502,-13.122]],[10,["_lscale"],7,[1,1,1,1]],[10,["_lrot"],7,[3,0,0.17739392574488483,0,0.9841399265901258]],[10,["_euler"],7,[1,0,20.436,0]]]],12]],[41,"Main Light","c0y6F5f+pAvI805TdmxIjx",2,[[75,4095,-43,[76]]],[1,4.39,9.627,-3.626],[3,-0.8005972817813567,-0.1453229557254247,-0.33176781330654553,0.4773419623260901],[1,-120.254,-42.248,-4.821]],[46,"Main Camera",10,[-44],[1,0,-1.998,1.044],[3,-0.2384910836248688,0,0,0.9711446869707088],[1,-27.595000000000006,0,0]],[77,14,1822425087,16],[47,"Camera",1,[-45],[1,0,0,1000]],[78,0,1073741824,320,2000,6,41943040,18,[4,4278190080]],[24,"C",20,20,12],[42,"block","0bo8pT/J1GrpwsBDEGdO/B",2,[[57,"Cube<ModelComponent>",-46,[10],[3],11]],[3,0,1,0,6.123233995736766e-17],[1,12,0.5,12],[1,0,180,0]]],0,[0,0,1,0,18,19,0,0,1,0,0,1,0,19,17,0,20,10,0,21,5,0,22,4,0,23,20,0,0,1,0,-1,18,0,-2,3,0,-3,8,0,-1,13,0,-2,14,0,-1,15,0,-2,10,0,-4,21,0,-5,5,0,-6,14,0,0,3,0,0,3,0,0,3,0,-1,4,0,-2,12,0,0,4,0,0,4,0,0,4,0,-1,11,0,0,5,0,24,8,0,0,5,0,-1,13,0,0,8,0,0,8,0,-1,16,0,0,11,0,0,11,0,0,12,0,-2,20,0,5,13,0,5,14,0,0,15,0,-1,17,0,-1,19,0,0,21,0,25,2,1,3,2,46],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,26,12,27,13,7,7,7,-1,1,-1,1,13,28,29],[10,10,10,120,121,9,12,9,14,122,123,124,125,126,127]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[28,"default-material",[{}],[{}]]],0,0,[0],[2],[7]],[[[7,"block",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[4,2],[128,7]],[[[2,".bin",4194113562,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":11592,"length":1824,"count":912,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":11592,"count":161,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3]]},"minPosition",8,[1,-0.8866992592811584,2.8476545810699463,-0.8987371921539307],"maxPosition",8,[1,0.8866991400718689,4.560068130493164,0.8987413048744202]]],-1],0,0,[],[],[]],[[{"name":"hud1","rect":{"x":0,"y":0,"width":200,"height":200},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-100,-100,0,100,-100,0,-100,100,0,100,100,0],"indexes":[0,1,2,2,1,3],"uv":[0,200,200,200,0,0,200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-100,"y":-100,"z":0},"maxPos":{"x":100,"y":100,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[15],0,[0],[30],[129]]]]
